



Network Working Group                                           G. Narea
Internet-Draft                                                 Relaycorp
Intended status: Standards Track                           31 March 2025
Expires: 2 October 2025


                          DomainAuth Version 1
                     draft-narea-domainauth-latest

Abstract

   This document defines DomainAuth, a protocol to attribute digital
   signatures to domain names in such a way that verification can occur
   entirely offline without a prior distribution of public keys.

   Each signature is distributed as part of a self-contained "signature
   bundle" that encapsulates a complete chain of trust comprising: (1) a
   DNSSEC chain from the root zone to a TXT record containing a public
   key or its digest, (2) an X.509 certificate chain from the key
   specified in the TXT record to the final signing key, and (3) the
   digital signature in the form of a CMS SignedData structure.

   Finally, signatures can be attributed to the domain name itself (e.g.
   "example.com") or specific users (e.g. "alice" of "example.com").

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://docs.veraid.net/domainauth-spec/draft-narea-domainauth.html.
   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-narea-domainauth/.

   Source for this draft and an issue tracker can be found at
   https://github.com/CheVeraId/domainauth-spec.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 2 October 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Problem Statement
     1.2.  Design Goals
     1.3.  Conventions and Terminology
   2.  Protocol Overview
     2.1.  Architecture
     2.2.  Workflow Summary
       2.2.1.  Organisation Setup
       2.2.2.  Certificate Issuance
       2.2.3.  Signature Bundle Production
       2.2.4.  Signature Bundle Verification
     2.3.  Trust Model
   3.  DNS Integration
     3.1.  DNSSEC Configuration
     3.2.  TXT Record
     3.3.  TTL Override
     3.4.  DNSSEC Chain Serialisation
   4.  X.509 Certificate Profile
     4.1.  Organisation Certificate
     4.2.  Member Certificate
     4.3.  Intermediate Certificate
   5.  Member Id Bundle
   6.  CMS SignedData Structure
     6.1.  Signature Types
       6.1.1.  Member Signatures
       6.1.2.  Organisation Signatures
     6.2.  Signature Metadata
   7.  Signature Bundle
     7.1.  Verification Procedure
   8.  Cryptographic Algorithms
     8.1.  Digital Signature Algorithms
     8.2.  Hash Functions
   9.  Maximum Validity Period
   10. Data Serialisation
   11. Test Service
   12. Implementation Status
     12.1.  VeraId
     12.2.  Letro
   13. Security Considerations
     13.1.  DNSSEC Dependency
     13.2.  Phishing Attacks
     13.3.  Domain Ownership Changes
     13.4.  Offline Verification Limitations
     13.5.  Key Management
     13.6.  Audit Trails
   14. IANA Considerations
     14.1.  DomainAuth Signature Algorithm Registry
     14.2.  DomainAuth Hash Function Registry
   15. References
     15.1.  Normative References
     15.2.  Informative References
   Appendix A.  ASN.1 Schemas
   Appendix B.  OID Registry
   Appendix C.  Implementation Guidance
     C.1.  Performance Optimisations
     C.2.  Implementation Recommendations
     C.3.  Service Design
     C.4.  User Interface Guidelines
   Acknowledgements
   Author's Address

1.  Introduction

   Public Key Infrastructures typically require continuous Internet
   connectivity for certificate validation or prior distribution of
   public keys, creating significant limitations for offline or
   intermittently connected environments.  This document addresses the
   challenge of securely attributing content to domain names in
   scenarios where verification must occur entirely offline, without
   reliance on real-time certificate status checking or pre-distributed
   trust anchors.

   DomainAuth solves this verification challenge by creating self-
   contained "signature bundles" that encapsulate the complete trust
   chain required for validation.  Each bundle comprises three
   cryptographically linked components: a DNSSEC chain extending from
   the DNS root to a domain's TXT record containing key material, an
   X.509 certificate chain from the domain to the signing entity, and a
   CMS SignedData structure containing the digital signature.  This
   architecture leverages established standards whilst eliminating the
   need for continuous connectivity or prior trust establishment.

   This specification defines the protocol components, data structures,
   and verification procedures that constitute the DomainAuth protocol.
   It covers the DNS integration mechanism, cryptographic requirements,
   certificate management practices, and signature verification
   processes.

1.1.  Problem Statement

   The protocol was initially designed and implemented to provide users
   of the offline messaging application Letro [LETRO] with identifiers
   that are customisable, user friendly, universally unique, and
   verifiable.

   Letro is powered by the delay-tolerant network Awala [AWALA], which
   offers an end-to-end encrypted sneakernet to transport data between a
   region disconnected from the Internet and a location with access to
   the Internet.  In the most extreme cases, this physical transport may
   take several weeks, during which users should be able to produce and
   verify digital signatures without relying on online services.

   Attacks by powerful adversaries, such as nation-state actors, are
   part of the threat model, given that Awala and Letro explicitly
   target people disconnected from the Internet due to conflict or
   government-sponsored censorship.

   Despite its origin in delay-tolerant networking, DomainAuth has
   broader applicability and can be useful when the Internet is
   available, such as the following use cases:

   *  Client authentication.  A client could prove its identity to a
      server by sending a short-lived token signed with DomainAuth; this
      would be analogous to using a JSON Web Token [JWT], except that it
      can be verified without a prior distribution of public keys or
      remote operations.  Alternatively, the client could sign each
      message sent to the server.

   *  Artefact signing.  Documents, applications, libraries, and other
      files could be signed on behalf of a domain name, without vendor-
      specific gatekeeping mechanisms.  This could unlock further use
      cases, such as enabling users to share original content whilst
      proving authenticity and integrity, instead of sharing URLs to
      resources that could be blocked at the network level.

   *  Peer-to-peer web hosting.  A next-generation of websites could be
      hosted on a peer-to-peer network, with files reliably attributed
      to their respective domain names.

   The present document is meant to provide the foundation for all the
   use cases above in a generic manner.

1.2.  Design Goals

   DomainAuth is designed with the following primary goals:

   1.  *Decentralisation:* The protocol avoids the need for centralised
       authorities beyond the DNS hierarchy itself.  Each domain owner
       has exclusive control over their domain and its associated
       members.

   2.  *Offline verification:* All signature bundles contain sufficient
       information to be independently verified without requiring
       external network queries.

   3.  *User-friendly identifiers:* Identities are based on familiar,
       human-readable domain names and user names rather than
       cryptographically-derived values.

   4.  *Build upon well-established standards:* DNSSEC for securing DNS
       responses, X.509 for certificate management, and CMS for digital
       signatures.

   5.  *Minimal trust assumptions:* The protocol reduces trust
       dependencies by leveraging DNSSEC, limiting potential credential
       issuance attacks to DNS hierarchy operators (primarily IANA and
       TLD operators).

   6.  *Contextual binding:* Signatures are bound to specific
       "services", preventing their unauthorised use across different
       contexts.

1.3.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are used:

   *  *Organisation:* A domain name that participates in the DomainAuth
      protocol by configuring DNSSEC and publishing the necessary
      DomainAuth TXT record(s).

   *  *Member:* An entity that produces signatures on behalf of an
      organisation.  There are two types of members:

      -  *User:* A member identified by a unique user name within an
         organisation.

      -  *Bot:* A special type of member that acts on behalf of the
         organisation as a whole.  Bots do not have user names.

   *  *DomainAuth TXT Record:* A DNS TXT record at _domainauth.<domain>
      that contains the organisation's public key information.

   *  *Organisation Certificate:* A self-signed X.509 certificate owned
      by an organisation that serves as the root of trust for all
      signatures produced on behalf of that organisation.

   *  *Member Certificate:* An X.509 certificate issued by the
      organisation certificate to a member.

   *  *Member Id Bundle:* A data structure containing a member
      certificate, its issuing organisation certificate, and the DNSSEC
      chain proving the authenticity of the organisation's DomainAuth
      TXT record.

   *  *Signature Bundle:* A data structure containing a digital
      signature and all the information needed to verify it offline.
      There are two types of signature bundles:

      -  *Member Signature Bundle:* A signature bundle containing a
         signature produced by a member using their private key.

      -  *Organisation Signature Bundle:* A signature bundle containing
         a signature produced directly by an organisation using its
         private key, with a required member attribution that assigns
         authorship of the content to a specific member.

   *  *DNSSEC Chain:* A sequence of DNS responses that allows a verifier
      to cryptographically validate the authenticity of a DNS record.

   *  *Service:* A protocol or system that employs DomainAuth signatures
      for a specific use case.  Each service defines the context in
      which a signature is valid, and its own rules for signature
      creation and verification.

2.  Protocol Overview

2.1.  Architecture

   DomainAuth is built on three foundational layers:

   1.  *DNS and DNSSEC Layer:*

       *  Provides the domain name hierarchy and DNSSEC-based
          verification of domain ownership.

       *  The DNSSEC chain connects the DNS root of trust to the
          organisation's domain, enabling offline validation without
          prior key distribution.

       *  The DomainAuth TXT record bridges DNSSEC and PKI by publishing
          the organisation's public key information in a standardised,
          discoverable way.

   2.  *PKI Layer:*

       *  Establishes a per-organisation PKI where each organisation
          issues certificates to its members.

       *  The Organisation certificate functions as the domain-specific
          trust anchor that binds the organisation's public key to its
          domain name.

       *  Member certificates extend the organisation's trust to
          specific members, containing identity information that enables
          them to produce signatures.

   3.  *Signature Layer:*

       *  Enables members to produce digital signatures on behalf of
          their organisation.

       *  Signature bundles package digital signatures with all
          verification material, enabling offline validation.

   These layers interact differently depending on the signature type:

   *  In *member signatures*, the chain of trust flows from the DNSSEC
      chain to the organisation certificate, then to the member
      certificate, and finally to the signature, providing end-to-end
      cryptographic proof of authorship.

   *  In *organisation signatures*, the chain of trust flows from the
      DNSSEC chain directly to the organisation certificate and then to
      the signature, with member attribution provided as a claim rather
      than a cryptographic proof.

   Furthermore, Member Id Bundles are a key architectural component that
   packages the complete chain of trust (DNSSEC chain, organisation
   certificate, and member certificate) into a single message, enabling
   members to produce verifiable signatures offline.

2.2.  Workflow Summary

   The DomainAuth protocol involves the following key workflows:

2.2.1.  Organisation Setup

   First, the organisation must have DNSSEC properly configured for its
   domain.

   Then, the organisation must generate an asymmetric key pair and
   publish its public key information in a DomainAuth TXT record at
   _domainauth.<domain> as described in Section 3.2.

   Multiple such records are allowed, which can be useful for key
   rotation or binding different keys to different services.

2.2.2.  Certificate Issuance

   The organisation must issue an X.509 certificate using its private
   key, or reuse an existing certificate valid during the intended
   validity period.

   When issuing a member certificate, the organisation must distribute
   it along with the organisation certificate.  This can be done with a
   member id bundle as defined in Section 5, which is desirable in
   services meant to be used offline as it also contains the DNSSEC
   chain.

2.2.3.  Signature Bundle Production

   A member would produce a signature bundle as follows:

   1.  Use their private key to produce a CMS SignedData structure,
       encapsulating the member's certificate.

   2.  Obtain the DNSSEC chain from the DomainAuth TXT record.  If not
       provided by the organisation (e.g. in the form of a member id
       bundle), the member will have to resolve it or retrieve it from a
       cache.

   3.  Construct a signature bundle with the CMS SignedData structure,
       the organisation certificate, and the DNSSEC chain.

   Similarly, an organisation would produce a signature bundle as
   follows:

   1.  Use its private key to produce a CMS SignedData structure,
       without encapsulating the organisation's certificate.

   2.  Resolve the DNSSEC chain from the DomainAuth TXT record, or use a
       cached chain valid during the intended validity period.

   3.  Construct a signature bundle with the CMS SignedData structure,
       the organisation certificate, and the DNSSEC chain.

   In both cases, the signer can choose to encapsulate the plaintext in
   the CMS SignedData structure or distribute it separately.

2.2.4.  Signature Bundle Verification

   The verification process involves validating the entire chain of
   trust as follows:

   1.  Verify the DNSSEC chain.

   2.  Verify the organisation certificate using the public key from the
       TXT record.

   3.  Determine the certificate of the signer of the CMS SignedData
       structure.  If it is an organisation signature, use the
       organisation certificate.  Otherwise, use the certificate of the
       member, which is encapsulated in the CMS SignedData structure.

   4.  Verify the CMS SignedData structure against the certificate of
       the signer.

   5.  Verify that the signature is valid for the intended service and
       time period.

   Alternatively, the verifier can start with the digital signature,
   then verify the organisation certificate and finally the DNSSEC
   chain.

   For more detailed information on the verification process,
   particularly regarding validity periods, see Section 7.1.

2.3.  Trust Model

   DomainAuth's trust model differs significantly from traditional PKIs
   such as the one used for TLS:

   1.  *Domain-specific trust roots:* Each organisation is only able to
       issue certificates for itself and its members.  Unlike
       traditional PKIs where any Certificate Authority can issue
       certificates for any domain, DomainAuth enforces a strict
       hierarchy where domain control is the only path to certificate
       issuance.

   2.  *DNSSEC as the foundation:* Trust is anchored in DNSSEC, relying
       on the hierarchical nature of DNS to establish domain control.
       The chain of trust begins with the DNS root zone and extends
       through each DNS subdelegation to the organisation's domain.

   3.  *Self-contained verification:* Signature bundles include all
       necessary information (DNSSEC chains, certificates) to allow
       completely offline verification.

   4.  *Short-lived credentials:* DomainAuth favours short-lived
       credentials over revocation mechanisms, reducing complexity and
       vulnerability to disconnected operation.  However, what
       constitutes "short-lived" will be entirely dependent on the
       nature of the service.

   5.  *Two signature types with different trust models:*

       *  *Member signatures:* Produced by members using their private
          keys, these signatures cryptographically prove that a specific
          member created the content.  The verification chain goes from
          DNSSEC to the organisation certificate to the member
          certificate to the signature.

       *  *Organisation signatures:* Produced directly by organisations
          using their private keys, these signatures prove that the
          organisation vouches for the content.  When including user
          attribution, the organisation claims (but does not
          cryptographically prove) that a specific user created the
          content.

   By relying on DNSSEC, DomainAuth inherits its security properties and
   limitations.  The protocol's trust is ultimately rooted in the DNS
   hierarchy, including the root zone and TLD operators.

3.  DNS Integration

   This document makes no distinction between different types of DNS
   zones, with the exception of the root zone which MUST NOT participate
   in DomainAuth.  The root zone exclusion avoids representation
   challenges in user interfaces (where it would appear as a dot or
   empty string) and eliminates the need for implementations to handle
   this special case.

   TLDs, apex domains, and subdomains are all treated equivalently.  Any
   domain at any level in the DNS hierarchy, except the root zone, MAY
   implement DomainAuth.  Each participating domain operates entirely
   independently from its parent zones, with no hierarchical
   relationship or inherited trust.

   Throughout this document, the terms "domain" and "domain name" refer
   to any such zone without regard to its hierarchical position.

3.1.  DNSSEC Configuration

   Participating domains MUST have a complete DNSSEC chain of trust from
   the root zone to the DomainAuth TXT record.

   Newly registered domains SHOULD wait at least the maximum validity
   period in Section 9 before enabling DomainAuth to prevent potential
   attacks using DNSSEC chains from previous domain owners.

3.2.  TXT Record

   Each organisation participating in the DomainAuth protocol MUST
   publish a TXT record at _domainauth.<domain> with the following
   fields separated by simple spaces:

   1.  *Version* (required): An integer denoting the version of the
       DomainAuth TXT record format, set to 0 (zero) for this version of
       the specification.

   2.  *Key Algorithm* (required): An integer denoting the key
       algorithm:

       *  1: RSA-PSS with modulus 2048 bits.

       *  2: RSA-PSS with modulus 3072 bits.

       *  3: RSA-PSS with modulus 4096 bits.

       More details on the RSA-PSS algorithm can be found in
       Section 8.1.

   3.  *Key Id Type* (required): An integer denoting how the key is
       identified:

       *  1: The key id is the SHA-256 digest of the key.

       *  2: The key id is the SHA-384 digest of the key.

       *  3: The key id is the SHA-512 digest of the key.

       More details on hash functions can be found in Section 8.2.

   4.  *Key Id* (required): The Base64-encoded (unpadded) representation
       of the key digest, as specified by the Key Id Type.

   5.  *TTL Override* (required): A positive integer representing the
       number of seconds for the maximum validity period of signatures.
       This value MUST be at least 1 second and not exceed the limit
       specified in Section 9.  Refer to Section 3.3 for more details.

   6.  *Service OID* (optional): An Object Identifier (in dotted decimal
       notation) binding the key to a specific service.  If omitted, the
       key is valid for any service.

   Multiple TXT records MAY be published at the same zone to support
   different keys, key algorithms, or services.

   Verifiers MUST select the appropriate TXT record based on the key
   information and service OID in the signature being verified.

   For example, the following TXT record specifies an RSA-2048 key
   identified by its SHA-512 digest with a TTL override of 24 hours
   (86,400 seconds) and no service binding:

_domainauth.example.com. IN TXT "0 1 3 dGhpcyBpcyBub3QgYSByZWFsIGtleSBkaWdlc3Q 86400"

3.3.  TTL Override

   The TTL override field in the DomainAuth TXT record enables
   verification of DNS records and DNSSEC signatures for longer periods
   than their respective specifications would allow, which is essential
   for delay-tolerant use cases where users may be offline for extended
   periods.

   DNS records and DNSSEC signatures typically have TTL values that may
   be as short as a few minutes or hours.  The TTL override mechanism
   allows the DNSSEC chain to remain verifiable for a significantly
   longer period, regardless of the TTL in such records.  Refer to
   Section 9 for the maximum validity period.

   During verification, the TTL override creates a restricted time
   window that extends backwards from the end of the requested
   verification period by the specified number of seconds.  Verification
   will succeed if the DNSSEC records were valid at any point during
   this window, even if the standard DNS TTLs would have expired.

   For example, if a DNS record has a standard TTL of 3600 seconds (1
   hour) but the DomainAuth TXT record specifies a TTL override of
   604,800 seconds (7 days), a signature can still be verified up to 7
   days after creation, even when offline.  If a verifier attempts to
   verify a signature 5 days after it was created, the verification
   would succeed with the TTL override, whereas it would fail with only
   the standard 1-hour TTL.

3.4.  DNSSEC Chain Serialisation

   The serialised chain MUST be encoded as the ASN.1 DnssecChain
   structure below, where each OCTET STRING contains a complete DNS
   message as defined in [DNS]:

   DnssecChain ::= SET OF OCTET STRING

   This chain MUST include all DNSSEC responses necessary to validate
   the _domainauth.<domain>/TXT record from the trust anchor.  However,
   the root zone DS records SHOULD be omitted, since they will be
   ignored by verifiers as described in Section 7.1.

   Implementations SHOULD optimise the serialisation to minimise
   redundancy and size whilst ensuring completeness for offline
   verification.

4.  X.509 Certificate Profile

   All X.509 certificates MUST comply with [X.509].  Additionally, each
   certificate MUST:

   *  Have a validity period of at least 1 second and not exceeding the
      limit specified in Section 9.

   *  Only use the algorithms specified in Section 8.

   *  Contain the following extensions marked as critical:

      -  Authority Key Identifier from Section 4.2.1.1 of [X.509].

      -  Subject Key Identifier from Section 4.2.1.2 of [X.509].

   Additional requirements and recommendations apply to specific
   certificate types as described in the following sections.

4.1.  Organisation Certificate

   This is certificate whose subject key is referenced by the DomainAuth
   TXT record.  The following requirements and recommendations apply:

   *  Its Subject Distinguished Name MUST contain the Common Name
      attribute (OID 2.5.4.3) set to the organisation's domain name with
      a trailing dot (e.g. example.com.).

   *  When the certificate is used to issue other certificates, the
      Basic Constraints extension from Section 4.2.1.9 of [X.509] MUST
      be present and marked as critical.  Additionally, the CA flag MUST
      be enabled, and the Path Length Constraint SHOULD be set to the
      lowest possible value for the length of the intended certificate
      chains.

   *  When the certificate is used directly to sign CMS SignedData
      structures, the Basic Constraints extension MAY be absent.  If
      present, it SHOULD have the CA flag disabled.

4.2.  Member Certificate

   *  Its Subject Distinguished Name MUST contain the Common Name
      attribute (OID 2.5.4.3) set to the member's name in the case of
      users or the at sign (@) in the case of bots.

   *  The Basic Constraints extension from Section 4.2.1.9 of [X.509]
      MAY be absent.  If present, it SHOULD have the CA flag disabled.

4.3.  Intermediate Certificate

   Organisations MAY issue intermediate certificates to delegate the
   responsibility of signing member certificates to other entities.

   When an intermediate certificate is used, the Basic Constraints
   extension from Section 4.2.1.9 of [X.509] MUST be present and marked
   as critical.  Additionally, the CA flag MUST be enabled, and the Path
   Length Constraint SHOULD be set to the lowest possible value for the
   length of the intended certificate chains.

   Note that if an intermediate certificate is assigned a Common Name,
   it could also be used as a member certificate and it could therefore
   produce member signatures.

5.  Member Id Bundle

   The Member Id Bundle is a self-contained message that provides all
   the information needed for a member to produce verifiable signatures.
   It is serialised using ASN.1 with the following structure:

   MemberIdBundle ::= SEQUENCE {
       version                  [0] INTEGER,
       dnssecChain              [1] DnssecChain,
       organisationCertificate  [2] Certificate,
       memberCertificate        [3] Certificate,
       intermediateCertificates [4] SET OF Certificate OPTIONAL
   }

   Where:

   *  version is the format version, set to 0 (zero) in this version of
      the specification.

   *  dnssecChain contains the serialised DNSSEC chain proving the
      authenticity of the organisation's DomainAuth TXT record.

   *  organisationCertificate is the organisation's X.509 certificate.

   *  memberCertificate is the X.509 certificate issued to the member by
      the organisation.

   *  intermediateCertificates is a set of X.509 certificates issued by
      the organisation to other entities that can sign member
      certificates.  It SHOULD NOT include certificates extraneous to
      the chain between the organisation certificate and the member
      certificate.

   The Member Id Bundle links the member to their organisation and
   provides all the cryptographic material needed to verify this
   relationship.  It serves as a precursor to signature production and
   is typically distributed to members by their organisation's
   certificate management system.

   Member Id Bundles are not inherently confidential, as they contain
   only public information, but their integrity is critical for secure
   signature production.

6.  CMS SignedData Structure

   DomainAuth signatures use CMS SignedData structures as defined in
   Section 5 of [CMS], with additional requirements and recommendations:

   *  signerInfos field:

      -  There MUST be exactly one SignerInfo.

      -  The digest and signature algorithms MUST comply with Section 8.

      -  The following signed attributes MUST be included:

         o  Content Type attribute as defined in Section 11.1 of [CMS].

         o  Message Digest attribute as defined in Section 11.2 of
            [CMS].

         o  DomainAuth signature metadata attribute as defined in
            Section 6.2.

   *  certificates field:

      -  Any intermediate certificates between the organisation and the
         signer MUST be included.

      -  The organisation certificate SHOULD NOT be included, since it
         is already included in the Signature Bundle.

      -  Certificates outside the certification path between the
         organisation and the signer SHOULD NOT be included.

6.1.  Signature Types

   DomainAuth supports two distinct types of signatures, offering
   different levels of assurance and operational flexibility:

6.1.1.  Member Signatures

   Member signatures are produced by members (users or bots) using their
   own private key.  They are suitable for scenarios requiring strong
   non-repudiation at the individual member level, or when members need
   to produce signatures whilst being offline for extended periods.

   The member's certificate MUST be included in the
   SignedData.certificates field.

6.1.2.  Organisation Signatures

   Organisation signatures are produced using either the organisation's
   private key or a delegated signing key.  All organisation signatures
   include mandatory member attribution to indicate content authorship.
   These signatures are suitable for scenarios where individual member
   certificate management is impractical or when the organisation takes
   direct responsibility for content.

   The SignerInfo structure MUST include the DomainAuth member
   attribution in its signed attributes, using the OID
   1.3.6.1.4.1.58708.1.2 and the value defined in the ASN.1 structure
   below:

   MemberAttribution ::= UTF8String

   The member attribution value MUST conform to the restrictions defined
   in Section 13.2.  For users, this is the user name; for bots, this is
   the at sign (@).

   Member attribution is a claim made by the organisation, not
   cryptographically proven by the member.  Verifiers SHOULD present
   this distinction clearly to end users.

6.2.  Signature Metadata

   Each SignedData structure includes metadata that binds the signature
   to a specific service and validity period.  This metadata is included
   as a signed attribute in the SignerInfo structure.

   The signature metadata attribute MUST use the OID
   1.3.6.1.4.1.58708.1.0 and be encoded as the SignatureMetadata ASN.1
   structure below:

   SignatureMetadata ::= SEQUENCE {
       serviceOid      [0] OBJECT IDENTIFIER,
       validityPeriod  [1] DatePeriod
   }

   DatePeriod ::= SEQUENCE {
       start  [0] GeneralizedTime,
       end    [1] GeneralizedTime
   }

   Where:

   *  serviceOid is the Object Identifier of the service for which the
      signature is valid.

   *  validityPeriod specifies the time period during which the
      signature is considered valid.  The start and end fields MUST be
      expressed in Greenwich Mean Time (GMT) and MUST include seconds.
      Therefore, both times will follow the format YYYYMMDDHHMMSSZ.
      Both the start and end times are inclusive, meaning the signature
      is valid at exactly the start time and remains valid until exactly
      the end time.

7.  Signature Bundle

   The Signature Bundle is the primary artefact of the DomainAuth
   protocol, containing a digital signature and all the information
   needed to verify it offline.  It is serialised using ASN.1 with the
   following structure:

   SignatureBundle ::= SEQUENCE {
       version                  [0] INTEGER,
       dnssecChain              [1] DnssecChain,
       organisationCertificate  [2] Certificate,
       signature                [3] ContentInfo
   }

   Where:

   *  version is the format version, set to 0 (zero) in this version of
      the specification.

   *  dnssecChain contains the serialised DNSSEC chain proving the
      authenticity of the organisation's DomainAuth TXT record.

   *  organisationCertificate is the organisation's X.509 certificate.

   *  signature is a CMS ContentInfo containing the SignedData
      structure.

   The specific contents of the signature field depend on whether it is
   a member signature or an organisation signature, as detailed in
   Section 6.

7.1.  Verification Procedure

   Implementations MUST verify the syntactic validity of the signature
   bundle against its ASN.1 schema and reject malformed values.  Refer
   to Section 10 for more information on serialisation formats.

   A fundamental aspect of the verification procedure is to establish
   that all components—the DNSSEC chain, X.509 certificate path and the
   signature itself—were simultaneously valid for at least one second
   within the specified verification period.  This temporal intersection
   of validity periods ensures the cryptographic continuity of the trust
   chain at the time of verification.

   Implementations MUST verify every syntactically-valid signature
   bundle as follows, and fail if any step fails:

   1.  *Establish the verification parameters.* The verifier MUST
       specify the following parameters:

       *  Plaintext: The content to be verified if it is detached from
          the SignedData structure (i.e. the field
          SignedData.encapContentInfo.eContent is absent).  This value
          MUST NOT be provided if the plaintext is encapsulated.

       *  Service: The OID of the service for which the signature must
          be valid.

       *  Validity period: The inclusive time range during which the
          signature bundle must be valid for at least one second (e.g.
          1st January 1970 00:00:00 UTC to 31st January 1970 23:59:59
          UTC).  This period MAY be specified as a specific time (e.g.
          1st January 1970 00:00:00 UTC), in which case it MUST be
          converted to a 1-second period where the start and end are the
          same as the specified time.

       The verifier MAY override the root zone DNSSEC DS record(s) for
       testing purposes only.

   2.  *Identify the relevant DomainAuth TXT record and determine the
       verification time window for the DNSSEC chain:*

       1.  Extract the domain name from the Common Name attribute in the
           organisation certificate's Distinguished Name.

       2.  Extract all records in the RRSet for
           _domainauth.<domain>/TXT.

       3.  Parse each TXT record rdata, per the rules in Section 3.2.

       4.  Locate records matching the subject key specification from
           the organisation certificate (key algorithm and key id) and
           the service OID specified by the verifier (either matching
           exactly or with an absent service OID).  If multiple matching
           records exist, use the one with the specific service OID; if
           none exists, use the wildcard record.  If multiple records of
           the same type (specific or wildcard) match, verification MUST
           fail.

       5.  Extract the TTL override value from the identified TXT
           record.

       6.  Calculate a verification time window for the DNSSEC chain as
           follows:

           *  End time: The end of the required verification period (as
              specified by the verifier).

           *  Start time: The maximum (later) of:

              -  The start of the required verification period (as
                 specified by the verifier).

              -  The end time minus the TTL override value in seconds.

   3.  *Verify the DNSSEC chain* from the root zone to the
       _domainauth.<domain>/TXT RRSet as described in [DNSSEC], ensuring
       that the chain was valid for at least one second within the
       verification time window calculated in the previous step.

   4.  *Verify the X.509 certificate chain* from the organisation
       certificate to the signer's certificate as specified in [X.509],
       using any additional certificates in the SignedData.certificates
       field as potential intermediate certificates when constructing
       the chain.  Note that the chain will comprise a single
       certificate when the organisation itself is the signer.

       The certificate chain MUST overlap with the verification time
       window and the DNSSEC chain for at least one second.

   5.  *Verify the CMS SignedData structure* as described in Section 5.6
       of [CMS], using the signer's certificate from the
       SignedData.certificates field or the organisation certificate if
       the signer is the organisation itself.

       The signature metadata attribute MUST be present in the signed
       attributes of the SignerInfo structure.  Additionally:

       *  The service OID MUST match that specified by the verifier.

       *  The validity period MUST overlap with the verification time
          window, the X.509 certificate chain and the DNSSEC chain for
          at least one second.

       If present, the member attribution attribute MUST be in the
       signed attributes of the SignerInfo structure, and its value MUST
       be a valid member name as specified in Section 13.2.  If absent,
       the signer MUST be a member whose certificate meets the
       requirements specified in Section 4.2.

   6.  *Produce verification output:*

       *  The organisation name without a trailing dot (e.g.
          example.com).  This string MUST be represented using Unicode,
          coverting from Punycode if necessary.

       *  If the signer is a user, their name MUST be a Unicode string.
          The name MUST be taken from the signer certificate in the case
          of member signatures, or from the member attribution in the
          case of organisation signatures.  If the signer is a bot, no
          name MUST be produced (not even an empty string).

       *  Whether the signature was produced by the member or the
          organisation.

   Alternatively, the verification MAY start with the SignedData
   structure and end with the DNSSEC chain as described below, as long
   as the validity periods across all components still overlap for at
   least one second:

   1.  Establish the verification parameters.

   2.  Verify the CMS SignedData structure.

   3.  Verify the X.509 certificate chain.

   4.  Identify the relevant DomainAuth TXT record and determine the
       verification time window for the DNSSEC chain.

   5.  Verify the DNSSEC chain.

   6.  Produce verification output.

   The verification process MUST be performed in full, without skipping
   any steps.

8.  Cryptographic Algorithms

   This section describes the cryptographic algorithms used in the X.509
   certificates and CMS SignedData structures, but not to the DNSSEC
   chain.

   Algorithms not explicitly allowed by this specification MUST be
   rejected.

   Services MAY recommend specific algorithms within the set of
   algorithms allowed by this specification.

8.1.  Digital Signature Algorithms

   For ease of adoption and interoperability reasons, this specification
   only requires support for RSA Signature Scheme with Appendix -
   Probabilistic Signature Scheme (RSA-PSS), as defined in Section 8.1
   of [RFC8017].  The DomainAuth Signature Algorithm Registry, as
   defined in Section 14.1, MAY introduce support for additional
   signature algorithms and restrict the use of RSA-PSS (including its
   deprecation).

   Implementations MUST support RSA-PSS in X.509 certificates as defined
   in [RFC4055] and CMS SignedData structures as defined in [RFC4056].

   RSA keys with moduli less than 2048 bits MUST be rejected.  RSA keys
   with modulus size of 2048 MUST be supported, and greater sizes SHOULD
   be supported.

8.2.  Hash Functions

   For ease of adoption and interoperability reasons, this specification
   only requires support for SHA2 hash functions, as defined in
   [RFC6234], in digital signatures.  The DomainAuth Hash Function
   Registry, as defined in Section 14.2, MAY introduce support for
   additional hash functions and restrict the use of SHA2 hash functions
   (including their deprecation).

   Implementations MUST support SHA-256, SHA-384, and SHA-512 hash
   functions.  For the avoidance of doubt, SHA-1 and SHA-224 MUST NOT be
   supported.

9.  Maximum Validity Period

   Digital signatures MUST NOT have a validity period greater than
   7,776,000 seconds (90 days).  This limit applies to DNSSEC RRSIG
   records, X.509 certificates, and CMS SignedData structures (including
   the signature metadata).

   Similarly, verifiers MUST NOT allow a validity period greater than
   this limit when verifying signatures over a time period.

   Services SHOULD specify a maximum validity period shorter than the
   protocol-level limit where feasible.  This approach improves security
   by limiting the window of vulnerability in case of key compromise or
   other security incidents.

   Applications built on DomainAuth services MAY impose even shorter
   validity periods based on their specific security requirements and
   threat models.

10.  Data Serialisation

   All data structures in the DomainAuth protocol are defined using
   Abstract Syntax Notation One (ASN.1), as referenced in [ASN.1].

   Implementations MUST support Distinguished Encoding Rules (DER) as
   defined in [ASN.1].

   Services MAY require or recommend additional ASN.1 encoding rules.
   In such cases, service implementations MUST handle the conversion
   between DER and the alternative encoding rules, if the additional
   rules are not supported by the DomainAuth implementation.

11.  Test Service

   Service-agnostic implementations SHOULD use the test service OID
   1.3.6.1.4.1.58708.1.1 for testing purposes.

   This service is not subject to additional requirements or
   recommendations.

12.  Implementation Status

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [RFC7942], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

   _Note to RFC Editor: Please remove this section before publication._

12.1.  VeraId

   DomainAuth is the successor to the VeraId protocol as defined in
   [VERAID].  DomainAuth and VeraId are functionally identical, except
   for the following differences:

   *  DNS TXT record:

      -  Name: DomainAuth uses _domainauth.example.com., whilst VeraId
         uses _veraid.example.com..

      -  Value: DomainAuth requires the value to begin with the number
         0, denoting the version of the DomainAuth TXT record format,
         followed by a space.  This value does not have a version number
         in VeraId.

   *  VeraId does not explicitly support intermediate certificates, and
      its implementations do not support them.  Consequently, the
      intermediateCertificates field in the Member Id Bundle is not
      present in VeraId.

   *  VeraId only allows ASN.1 DER serialisation.

   *  Cryptographic algorithms:

      -  Signature algorithms: VeraId only supports RSA-PSS with modulus
         sizes of 2048, 3072, and 4096 bits.  Support for EdDSA
         signatures was considered, but not implemented due to lack of
         support in the target Hardware Security Modules (HSMs), as
         documented in https://issuetracker.google.com/issues/232422224.

      -  Hash functions: VeraId only supports SHA-256, SHA-384, and SHA-
         512.

   *  VeraId does not require conversion of domain names from Punycode
      to Unicode.

   *  VeraId only disallows at-signs (@), tabs, and new lines in user
      names.  Otherwise, user names are case-sensitive and may contain
      spaces in VeraId.

   VeraId is led by the author of this document, who intends to
   deprecate the VeraId specification in favour of DomainAuth and update
   the reference implementations to fully comply with this
   specification.

   The following reference implementations of VeraId are available, all
   implemented by Relaycorp and undergoing independent security audits
   with reports expected by mid-April 2025:

   1.  *VeraId JavaScript Library*

       *  URL: https://github.com/relaycorp/veraid-js

       *  Maturity: Used in production in the VeraId Authority
          application.

       *  Coverage: The entire protocol as defined in [VERAID].

       *  Licensing: MIT licence.

   2.  *VeraId JVM Library*

       *  URL: https://github.com/relaycorp/veraid-jvm

       *  Maturity: Used in the Android version of Letro [LETRO].

       *  Coverage: The entire protocol except for Organisation
          Signature Bundles.

       *  Licensing: Apache 2.0 licence.

   3.  *VeraId Authority*

       *  URL: https://github.com/relaycorp/veraid-authority

       *  Description: A multi-tenant, cloud-native application for
          managing organisation members and issuing Member Id Bundles.

       *  Maturity: Used in production in Letro [LETRO].

       *  Coverage: Uses the VeraId JavaScript Library to issue Member
          Id Bundles and Organisation Signature Bundles.

       *  Licensing: Business Source License version 1.1.

12.2.  Letro

   [LETRO] is the only VeraId service as of this writing.

   *  Organisation: Relaycorp

   *  URLs:

      -  https://github.com/relaycorp/letro-android

      -  https://docs.relaycorp.tech/letro-server/

   *  Maturity: Experimental.

   *  Coverage: The implementation exercises the entire protocol as
      defined in [VERAID], except for organisation signatures and bot
      members.  It uses the VeraId JVM Library to issue member
      signatures on Android, and the VeraId Authority to issue Member Id
      Bundles under a variety of domain names operated by Relaycorp
      (e.g. applepie.rocks, cuppa.fans).

   *  Licensing: Freely distributable with acknowledgement (GNU GPLv3
      and GNU AGPLv3 licences).

   *  Contact: https://relaycorp.tech/

   *  Last updated: 2024

13.  Security Considerations

13.1.  DNSSEC Dependency

   DomainAuth's security model relies fundamentally on DNSSEC, which
   introduces specific security considerations:

   1.  *Trust Anchors:*

       *  The DomainAuth protocol inherits trust from the DNSSEC root
          zone.

       *  Compromise of the root KSK would undermine the entire system.

       *  Implementations MUST securely manage and update DNSSEC trust
          anchors.

   2.  *TLD Control:*

       *  Many TLDs are controlled by governments or private entities.

       *  A malicious TLD operator could theoretically issue fraudulent
          DNSSEC responses for domains under their zone.

       *  Organisations SHOULD consider the governance of their TLD when
          assessing security, including reviewing the relevant DNSSEC
          Practice Statement.

   3.  *DNSSEC Implementation Vulnerabilities:*

       *  Flaws in DNSSEC implementations could affect DomainAuth
          security.

       *  Implementations SHOULD use well-tested, actively maintained
          DNSSEC libraries.

       *  Security updates for DNSSEC components SHOULD be promptly
          applied.

   Whilst these dependencies introduce potential vulnerabilities, the
   distributed nature of DNS provides significant security advantages
   compared to centralised PKI models, particularly for offline
   verification scenarios.

13.2.  Phishing Attacks

   To mitigate Internationalised Domain Name (IDN) homograph attacks,
   user interfaces SHOULD adopt the guidelines from Section 2.11.2
   (Recommendations for User Agents) of [UTR36].

   To mitigate phishing attacks leveraging user names, such names MUST
   be normalised to the PRECIS UsernameCaseMapped profile as specified
   in Section 3.3 of [RFC8265], but spaces (U+0020) and at signs
   (U+0040) MUST NOT be allowed.

13.3.  Domain Ownership Changes

   Organisations SHOULD delay implementing DomainAuth until at least the
   period specified in Section 9 has elapsed since the domain was
   registered or acquired.  This prevents the DNSSEC chain from the
   previous owner from remaining valid.

   Domain ownership changes represent a fundamental challenge to any
   domain-based authentication system.  DomainAuth's approach of using
   short-lived certificates and signatures helps mitigate these risks by
   limiting the time window during which historical signatures remain
   valid.

13.4.  Offline Verification Limitations

   Offline verification introduces specific security considerations:

   *  *Time Synchronisation.* Verifiers rely on accurate local clocks to
      determine if signatures and certificates are within their validity
      periods.  Devices with incorrect time settings may incorrectly
      accept expired signatures or reject valid ones.

   *  *Replay Attacks.* Services SHOULD implement additional measures
      (e.g., nonces) for replay-sensitive operations.

   *  *Revocation Limitations.* Offline verification cannot check real-
      time revocation status, and therefore the protocol relies on short
      validity periods rather than revocation checking.

13.5.  Key Management

   Proper key management is essential for the security of the DomainAuth
   protocol.  The following requirements and recommendations apply:

   *  *Key Generation.* DomainAuth REQUIRES a Cryptographically-Secure
      Pseudorandom Number Generator (CSPRNG) compliant with [RFC4086].
      Implementations SHOULD integrate an existing CSPRNG implementation
      instead of creating their own.

   *  *Key Storage.* Private keys MUST be protected from unauthorised
      access.  Organisation private keys SHOULD be stored with the
      highest level of protection available, preferably in Hardware
      Security Modules (HSMs).  Member private keys SHOULD be protected
      with appropriate measures, such as operating system security
      mechanisms or hardware tokens.

   *  *Key Rotation.* Organisations SHOULD establish a regular schedule
      for rotating their keys.  Given the nature of the protocol,
      DomainAuth TXT records for old keys MAY be removed as soon as the
      new key is deployed without affecting signatures produced with the
      old key.

   *  *Key Compromise.* In the event of a key compromise, immediate
      rotation is REQUIRED and the compromised key's TXT record MUST be
      removed as soon as possible.

13.6.  Audit Trails

   Organisations implementing DomainAuth SHOULD maintain comprehensive
   audit logs of key management operations and certificate lifecycle
   events to support security incident investigation and facilitate non-
   repudiation.

   *  *Key Event Logging:*

      -  Organisations MUST log key generation, rotation, and retirement
         events.

      -  Each log entry SHOULD include the key identifier, timestamp,
         operation type, and authorised operator identity.

      -  Key material itself MUST NOT be included in logs.

   *  *Certificate Operations:*

      -  Certificate issuance and renewal events MUST be logged.

      -  Logs SHOULD include certificate subject, issuer, serial number,
         validity period, and authorising entity.

   *  *Member Management:*

      -  Member registration, name changes, and removal operations MUST
         be logged.

      -  Logs SHOULD include the affected member identifier and the
         authorising entity.

   *  *Signature Operations:*

      -  Organisations SHOULD log signature creation events for
         organisation signatures.

      -  Member signatures MAY be logged depending on service
         requirements.

      -  Logs SHOULD include signer identifier, signature validity
         period, service OID, and a content reference or hash.

   *  *Log Security:*

      -  Audit logs MUST be protected against unauthorised modification
         and access.

      -  Logs SHOULD be stored with integrity protection mechanisms.

      -  In high-risk environments, organisations SHOULD implement
         tamper-evident logging.

14.  IANA Considerations

14.1.  DomainAuth Signature Algorithm Registry

14.2.  DomainAuth Hash Function Registry

15.  References

15.1.  Normative References

   [ASN.1]    International Telecommunications Union, "Information
              Technology — ASN.1 encoding rules: Specification of Basic
              Encoding Rules (BER), Canonical Encoding Rules (CER) and
              Distinguished Encoding Rules (DER)", ITU-T Recommendation
              X.690, 1994.

   [CMS]      Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/rfc/rfc5652>.

   [DNS]      Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/rfc/rfc1035>.

   [DNSSEC]   Hoffman, P., "DNS Security Extensions (DNSSEC)", BCP 237,
              RFC 9364, DOI 10.17487/RFC9364, February 2023,
              <https://www.rfc-editor.org/rfc/rfc9364>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC4055]  Schaad, J., Kaliski, B., and R. Housley, "Additional
              Algorithms and Identifiers for RSA Cryptography for use in
              the Internet X.509 Public Key Infrastructure Certificate
              and Certificate Revocation List (CRL) Profile", RFC 4055,
              DOI 10.17487/RFC4055, June 2005,
              <https://www.rfc-editor.org/rfc/rfc4055>.

   [RFC4056]  Schaad, J., "Use of the RSASSA-PSS Signature Algorithm in
              Cryptographic Message Syntax (CMS)", RFC 4056,
              DOI 10.17487/RFC4056, June 2005,
              <https://www.rfc-editor.org/rfc/rfc4056>.

   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
              "Randomness Requirements for Security", BCP 106, RFC 4086,
              DOI 10.17487/RFC4086, June 2005,
              <https://www.rfc-editor.org/rfc/rfc4086>.

   [RFC6234]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/rfc/rfc6234>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/rfc/rfc7942>.

   [RFC8017]  Moriarty, K., Ed., Kaliski, B., Jonsson, J., and A. Rusch,
              "PKCS #1: RSA Cryptography Specifications Version 2.2",
              RFC 8017, DOI 10.17487/RFC8017, November 2016,
              <https://www.rfc-editor.org/rfc/rfc8017>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8265]  Saint-Andre, P. and A. Melnikov, "Preparation,
              Enforcement, and Comparison of Internationalized Strings
              Representing Usernames and Passwords", RFC 8265,
              DOI 10.17487/RFC8265, October 2017,
              <https://www.rfc-editor.org/rfc/rfc8265>.

   [UTR36]    Davis, M. and M. Suignard, "UTR #36: Unicode Security
              Considerations", 19 September 2014,
              <https://www.unicode.org/reports/tr36/tr36-15.html>.

   [X.509]    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

15.2.  Informative References

   [AWALA]    Narea, G., "Awala", 2019, <https://specs.awala.network/>.

   [JWT]      Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7519>.

   [LETRO]    Narea, G., "Letro", 2023, <https://letro.app/en/>.

   [VERAID]   Narea, G., "VeraId V1 Specification", 2025,
              <https://veraid.net/spec/>.

Appendix A.  ASN.1 Schemas

   The following ASN.1 schemas define the data structures used in the
   DomainAuth protocol:

-- Top-level schemas for DomainAuth components

-- DNSSEC chain is a set of DNS messages
DnssecChain ::= SET OF OCTET STRING

-- Member Id Bundle
MemberIdBundle ::= SEQUENCE {
    version                  [0] INTEGER,
    dnssecChain              [1] DnssecChain,
    organisationCertificate  [2] Certificate,
    memberCertificate        [3] Certificate
}

-- Signature Bundle
SignatureBundle ::= SEQUENCE {
    version                  [0] INTEGER,
    dnssecChain              [1] DnssecChain,
    organisationCertificate  [2] Certificate,
    signature                [3] ContentInfo
}

-- Signature metadata (included as a signed attribute)
SignatureMetadata ::= SEQUENCE {
    serviceOid      [0] OBJECT IDENTIFIER,
    validityPeriod  [1] DatePeriod
}

-- Date period structure
DatePeriod ::= SEQUENCE {
    start  [0] GeneralizedTime,
    end    [1] GeneralizedTime
}

-- Member attribution (included as a signed attribute in organisation signatures)
MemberAttribution ::= UTF8String

   All DomainAuth data structures MUST be encoded using ASN.1 as
   specified in Section 10.

   The ASN.1 structures reference standard types from other
   specifications:

   *  Certificate is defined in X.509 (RFC 5280).

   *  ContentInfo is defined in CMS (RFC 5652).

   All implementations MUST strictly adhere to these schemas.  Any
   deviation in structure or encoding may result in verification
   failures.

Appendix B.  OID Registry

   The following Object Identifiers (OIDs) are defined for use in the
   DomainAuth protocol:

   1.  *DomainAuth Base OID:*

       *  1.3.6.1.4.1.58708.1 (iso.org.dod.internet.private.enterprise.r
          elaycorp.domainauth).

   2.  *Protocol OIDs:*

       *  1.3.6.1.4.1.58708.1.0: Signature Metadata Attribute.

       *  1.3.6.1.4.1.58708.1.2: Member Attribution Attribute.

   3.  *Service OIDs:*

       *  1.3.6.1.4.1.58708.1.1: Test Service.

   Third-party services implementing DomainAuth MUST register and use
   their own OIDs under their own arcs.  The DomainAuth OID arc
   (1.3.6.1.4.1.58708.1) is reserved exclusively for official services
   and protocol components under the DomainAuth project umbrella.

   OID registration procedures:

   1.  OIDs under the DomainAuth base OID are managed by the DomainAuth
       maintainers and reserved for official DomainAuth project
       purposes.

   2.  Third parties MUST NOT use OIDs under the DomainAuth arc for
       their services.

   3.  Third parties without their own OID arc SHOULD obtain one from
       their national registration authority or through IANA's Private
       Enterprise Number (PEN) registry.

   4.  Once allocated, OIDs are never reassigned to different services.

   Services SHOULD use versioning in their OID structure to manage
   protocol evolution.  Major, incompatible changes SHOULD use a new
   OID, whilst minor, backward-compatible changes MAY use the same OID.

Appendix C.  Implementation Guidance

C.1.  Performance Optimisations

   DomainAuth implementations can benefit from several performance
   optimisations whilst maintaining security:

   1.  *Caching Strategies:*

       *  Cache parsed certificates and DNSSEC chains to avoid repeated
          parsing.

       *  Cache verification results for the duration of their validity.

       *  Use LRU (Least Recently Used) or similar algorithms for cache
          management.

       *  Ensure cache entries are invalidated when they expire.

   2.  *Size Optimisations:*

       *  Minimise the size of DNSSEC chains by removing redundant
          records.

       *  Use the minimum required set of certificates in signature
          bundles.

       *  Consider compression for storage or transmission (whilst
          maintaining original formats for cryptographic operations).

   3.  *Computational Efficiency:*

       *  Use efficient ASN.1 parsing libraries.

       *  Implement lazy parsing for large structures.

       *  Consider hardware acceleration for cryptographic operations
          when available.

       *  Batch operations when processing multiple signatures.

   4.  *Memory Management:*

       *  Implement streaming processing for large documents.

       *  Avoid keeping entire documents in memory when possible.

       *  Free resources promptly after use.

       *  Consider memory constraints on resource-limited devices.

   5.  *Parallel Processing:*

       *  Parallelise independent verification steps when possible.

       *  Consider using worker threads for CPU-intensive operations.

       *  Balance parallelisation benefits against overhead costs.

C.2.  Implementation Recommendations

   1.  *Library/SDK Design:* - DomainAuth libraries and SDKs SHOULD
       provide distinct functions for creating member signatures and
       organisation signatures.  - Verification functions SHOULD be
       unified, with the signature type included in the verification
       output.  - Libraries SHOULD NOT require developers to specify the
       signature type during verification, as this should be determined
       automatically from the signature bundle.

   2.  *Use Case Considerations:* - Member signatures are recommended
       for applications where non-repudiation at the individual level is
       critical.  - Organisation signatures with member attribution are
       appropriate for applications where certificate management for
       individual members is impractical or where organisational
       accountability is sufficient.

   3.  *Hybrid Approaches:* - Some applications may benefit from
       supporting both signature types, allowing flexibility based on
       the specific context or user role.  - In hybrid implementations,
       clear policies should govern when each signature type is used.

C.3.  Service Design

   Service designers MUST obtain a unique OID for their service outside
   the DomainAuth OID arc.  E.g. randomly generated ones. - Include
   version information in their OID structure, or include version
   information in the service plaintexts.

   Services using DomainAuth MAY define additional validation rules
   beyond the core protocol requirements.  These rules allow services to
   implement domain-specific security policies.

   1.  *TTL Constraints:* - Services MUST specify a maximum TTL for
       signatures.  - The TTL MUST be within the range of 1 second to
       the limit specified in Section 9.  - For the minimum TTL, several
       minutes is recommended to account for clock drift.  - Services
       SHOULD choose the shortest TTL that meets their requirements.

   2.  *Content Type Restrictions:* - Services MAY restrict the types of
       content that can be signed.  - Content type restrictions SHOULD
       be documented in the service specification.  - Verifiers SHOULD
       check content type compliance during verification.

   3.  *Member Type Restrictions:* - Services MAY restrict which member
       types can produce valid signatures.  - For example, a service
       might only accept signatures from users (not bots).  - Such
       restrictions SHOULD be enforced during verification.

   4.  *Certificate Extensions:* - Services MAY define custom
       certificate extensions for additional authorisation.  - Such
       extensions SHOULD be clearly documented.  - Verifiers MUST check
       for and validate any required extensions.

   Service designers SHOULD document their validation rules
   comprehensively to ensure consistent implementation across different
   verifiers.  These rules SHOULD be designed to maintain the security
   properties of the DomainAuth protocol whilst addressing service-
   specific requirements.

C.4.  User Interface Guidelines

   1.  *Signature Type Indication:* User interfaces SHOULD clearly
       indicate whether a signature is a member signature or an
       organisation signature with member attribution.  Different visual
       indicators (icons, colors, labels) SHOULD be used to distinguish
       between the two signature types.

   2.  *Attribution Presentation:* For organisation signatures,
       interfaces SHOULD clearly indicate that the member attribution is
       a claim made by the organisation, not cryptographic proof.
       Example phrasing: Signed by example.com on behalf of alice rather
       than Signed by alice of example.com.

   3.  *Verification Details:* Interfaces SHOULD provide access to
       detailed verification information, including the full
       certification path and validity periods.  Advanced users SHOULD
       be able to view the complete verification process and results.

   4.  *Error Handling:* Clear error messages SHOULD be displayed when
       verification fails, with appropriate guidance for users.
       Different error handling may be appropriate for different
       signature types, reflecting their distinct trust models.

   Signatures from bots MUST be attributed to the organisation and the
   member name MUST be absent (not an empty string or at sign).

   User interfaces MUST NOT truncate user names or domain names, and
   they MUST visually distinguish the domain portion of identifiers.

Acknowledgements

   The author is grateful to the Open Technology Fund for funding the
   implementation of VeraId, which heavily influenced the final
   specification of the VeraId protocol, and therefore DomainAuth as its
   successor.

   The author would also like to thank the authors of [DNS], [DNSSEC],
   [X.509], [CMS], and [ASN.1], which underpin the present protocol.

Author's Address

   Gus Narea
   Relaycorp
   Email: gus@relaycorp.tech
