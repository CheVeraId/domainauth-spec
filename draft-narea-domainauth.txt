



Network Working Group                                           G. Narea
Internet-Draft                                                 Relaycorp
Intended status: Standards Track                           26 March 2025
Expires: 27 September 2025


                          DomainAuth Version 1
                     draft-narea-domainauth-latest

Abstract

   This document defines DomainAuth, a protocol to attribute digital
   signatures to domain names in such a way that every _signature
   bundle_ contains sufficient data to verify the signature entirely
   offline without a prior distribution of public keys.

   A signature bundle is a chain of trust comprising: (1) a DNSSEC chain
   from the root to a TXT record containing a public key or its digest,
   (2) an X.509 certificate chain from the key specified in the TXT
   record to the final signing key, and (3) the digital signature in the
   form of a CMS SignedData structure.

   Finally, signatures can be attributed to the domain name itself (e.g.
   "example.com") or specific users (e.g. "alice" of "example.com").

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://docs.veraid.net/domainauth-spec/draft-narea-domainauth.html.
   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-narea-domainauth/.

   Source for this draft and an issue tracker can be found at
   https://github.com/CheVeraId/domainauth-spec.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 27 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Problem Statement
     1.2.  Design Goals
     1.3.  Conventions and Terminology
   2.  Protocol Overview
     2.1.  Architecture
     2.2.  Trust Model
     2.3.  Key Components
     2.4.  Workflow Summary
       2.4.1.  Organisation Setup
       2.4.2.  Certificate Issuance
       2.4.3.  Signature Bundle Production
       2.4.4.  Signature Bundle Verification
   3.  DNS Integration
     3.1.  DNSSEC Configuration
     3.2.  TXT Record
     3.3.  TTL Override
     3.4.  DNSSEC Chain Serialisation
   4.  Cryptographic Foundation
     4.1.  Supported Algorithms
     4.2.  Key Management
     4.3.  Certificate Structure
       4.3.1.  Organisation Certificate Profile:
       4.3.2.  Member Certificate Profile:
     4.4.  Signature Format
   5.  Identity Model
     5.1.  Organisations
     5.2.  Members
     5.3.  Naming Conventions and Restrictions
   6.  Certificate Management
     6.1.  Organisation Certificate Issuance
     6.2.  Member Certificate Issuance
     6.3.  Certificate Validity Periods
     6.4.  Certificate Revocation
   7.  Signature Production and Verification
     7.1.  Member Id Bundle
     7.2.  Signature Bundle
     7.3.  Signature Metadata
     7.4.  Verification Process
     7.5.  Member Attribution
   8.  Service Integration
     8.1.  Service OIDs
     8.2.  Service-Specific Validation Rules
     8.3.  Implementation Guidelines
   9.  Implementation Guidance
     9.1.  Interoperability Considerations
     9.2.  Performance Optimisations
     9.3.  Member vs Organisation Signatures
       9.3.1.  Implementation Recommendations
       9.3.2.  User Interface Recommendations
   10. Implementation Status
     10.1.  VeraId JavaScript Library
     10.2.  VeraId JVM Library
     10.3.  VeraId Authority
   11. Security Considerations
     11.1.  DNSSEC Dependency
     11.2.  Homographic and Character Encoding Attacks
     11.3.  Domain Ownership Changes
     11.4.  Offline Verification Limitations
     11.5.  Organisation Signatures and Member Attribution
   12. IANA Considerations
   13. References
     13.1.  Normative References
     13.2.  Informative References
   Appendix A.  ASN.1 Schemas
   Appendix B.  OID Registry
   Acknowledgements
   Author's Address

1.  Introduction

   Public Key Infrastructures typically require continuous Internet
   connectivity for certificate validation or prior distribution of
   public keys, creating significant limitations for offline or
   intermittently connected environments.  This document addresses the
   challenge of securely attributing content to domain names in
   scenarios where verification must occur entirely offline, without
   reliance on real-time certificate status checking or pre-distributed
   trust anchors.

   DomainAuth solves this verification challenge by creating self-
   contained "signature bundles" that encapsulate the complete trust
   chain required for validation.  Each bundle comprises three
   cryptographically linked components: a DNSSEC chain extending from
   the DNS root to a domain's TXT record containing key material, an
   X.509 certificate chain from the domain to the signing entity, and a
   CMS SignedData structure containing the digital signature.  This
   architecture leverages established standards whilst eliminating the
   need for continuous connectivity or prior trust establishment.

   This specification defines the protocol components, data structures,
   and verification procedures that constitute the DomainAuth protocol.
   It covers the DNS integration mechanism, cryptographic requirements,
   identity model, certificate management practices, and signature
   verification processes.

1.1.  Problem Statement

   The protocol was initially designed and implemented to provide users
   of the offline messaging application [LETRO] with identifiers that
   are customisable, user friendly, universally unique, and verifiable.

   Letro is powered by the delay-tolerant network [AWALA], which offers
   an end-to-end encrypted sneakernet to transport data between a region
   disconnected from the Internet and a location with access to the
   Internet.  In the most extreme cases, this physical transport may
   take a short number of months.  Consequently, users should be able to
   produce and verify digital signatures during that time period without
   relying on online services.

   Attacks by powerful adversaries, such as nation-state actors, are
   part of the threat model, given that Awala and Letro explicitly
   target people disconnected from the Internet due to conflict or
   government-sponsored censorship.

   Despite its origin in delay-tolerant networking, DomainAuth has
   broader applicability and can be useful when the Internet is
   available, such as the following use cases:

   *  Client authentication.  A client could prove its identity to its
      server by sending a short-lived token signed with DomainAuth; this
      would be analogous to using a JSON Web Token ([JWT]), except that
      it can be verified without a prior distribution of public keys or
      remote operations.  Alternatively, the client could sign each
      message sent to the server.

   *  Artefact signing.  Documents, applications, libraries, and other
      files could be signed on behalf of a domain name, without vendor-
      specific gatekeeping mechanisms.  This could unlock further use
      cases, such as enabling users to share original content whilst
      proving authenticity and integrity, instead of sharing URLs to
      resources that could be blocked at the network level.

   *  Peer-to-peer web hosting.  A next-generation of websites could be
      hosted on a peer-to-peer network, with files reliably attributed
      to their respective domain names.

   The present document is meant to provide the foundation for all the
   use cases above in a generic manner.

1.2.  Design Goals

   DomainAuth is designed with the following primary goals:

   1.  *Decentralisation:* The protocol avoids the need for centralised
       authorities beyond the DNS hierarchy itself.  Each domain owner
       has exclusive control over their domain and its associated
       members.

   2.  *Offline verification:* All signature bundles contain sufficient
       information to be independently verified without requiring
       external network queries.

   3.  *User-friendly identifiers:* Identities are based on familiar,
       human-readable domain names and usernames rather than
       cryptographic digests.

   4.  *Build upon well-established standards:*

       *  DNSSEC for securing DNS responses.

       *  X.509 for certificate management.

       *  Cryptographic Message Syntax (CMS) for digital signatures.

   5.  *Minimal trust assumptions:* The protocol ensures that no entity
       can issue credentials on behalf of domains they do not control,
       unlike traditional PKIs where any CA can issue certificates for
       any domain.

   6.  *Contextual binding:* Signatures are bound to specific "services"
       (see below), preventing their unauthorised use across different
       contexts.

1.3.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are used:

   *  *Organisation:* A domain name that participates in the DomainAuth
      protocol by configuring DNSSEC and publishing the necessary
      DomainAuth TXT record(s).

   *  *Member:* An entity (user or bot) that produces signatures on
      behalf of an organisation.

   *  *User:* A specific type of member identified by a username within
      an organisation.

   *  *Bot:* A special type of member that acts on behalf of the
      organisation as a whole.  Bots do not have usernames.

   *  *DomainAuth TXT Record:* A DNS TXT record at _domainauth.<domain>
      that contains the organisation's public key information.

   *  *Organisation Certificate:* A self-signed X.509 certificate owned
      by an organisation that serves as the root of trust for all
      signatures produced on behalf of that organisation.

   *  *Member Certificate:* An X.509 certificate issued by the
      organisation certificate to a member.

   *  *Member Id Bundle:* A data structure containing a member
      certificate, its issuing organisation certificate, and the DNSSEC
      chain proving the authenticity of the organisation's DomainAuth
      TXT record.

   *  *Signature Bundle:* A data structure containing a digital
      signature and all the information needed to verify it offline.

   *  *Member Signature Bundle:* A signature bundle containing a
      signature produced by a member using their private key.

   *  *Organisation Signature Bundle:* A signature bundle containing a
      signature produced directly by an organisation using its private
      key, with a required member attribution that assigns authorship of
      the content to a specific member.

   *  *DNSSEC Chain:* A sequence of DNS responses that allows a verifier
      to cryptographically validate the authenticity of a DNS record.

   *  *Service OID:* An Object Identifier (OID) that uniquely identifies
      a service or application context where a DomainAuth signature is
      valid.

2.  Protocol Overview

2.1.  Architecture

   DomainAuth combines DNSSEC, X.509 certificates, and CMS signatures to
   create a decentralised authentication system.  The architecture
   consists of several layered components:

   1.  *DNS Layer:* Provides the domain name hierarchy and DNSSEC-based
       verification of domain ownership.

   2.  *PKI Layer:* Establishes a per-organisation Public Key
       Infrastructure where each organisation issues certificates to its
       members.

   3.  *Signature Layer:* Enables members to produce unforgeable digital
       signatures on behalf of their organisation.

   Each organisation serves as an independent trust anchor, responsible
   for managing its own members and certificates.  The DNSSEC
   infrastructure provides a secure foundation for verifying the
   authenticity of the organisation's public key.

   DomainAuth's self-contained verification model allows signature
   bundles to be verified independently, without requiring connectivity
   to the Internet or the organisation's infrastructure.

2.2.  Trust Model

   DomainAuth's trust model differs significantly from traditional PKIs
   such as the one used for TLS:

   1.  *Domain-specific trust roots:* Each organisation is only able to
       issue certificates for itself and its members.  Unlike
       traditional PKIs where any Certificate Authority can issue
       certificates for any domain, DomainAuth enforces a strict
       hierarchy where domain control is the only path to certificate
       issuance.

   2.  *DNSSEC as the foundation:* Trust is anchored in DNSSEC, relying
       on the hierarchical nature of DNS to establish domain control.
       The chain of trust begins with the DNS root zone and extends
       through each DNS subdelegation to the organisation's domain.

   3.  *Self-contained verification:* Signature bundles include all
       necessary information (DNSSEC chains, certificates) to allow
       completely offline verification.

   4.  *Short-lived credentials:* DomainAuth favours short-lived
       credentials over revocation mechanisms, reducing complexity and
       vulnerability to disconnected operation.  However, what
       constitutes "short-lived" will be entirely dependent on the
       nature of the service.

   5.  *Two signature types with different trust models:*

       *  *Member signatures:* Produced by members using their private
          keys, these signatures cryptographically prove that a specific
          member created the content.  The verification chain goes from
          DNSSEC to the organisation certificate to the member
          certificate to the signature.

       *  *Organisation signatures:* Produced directly by organisations
          using their private keys, these signatures prove that the
          organisation vouches for the content.  When including user
          attribution, the organisation claims (but does not
          cryptographically prove) that a specific user created the
          content.

   By relying on DNSSEC, DomainAuth inherits its security properties and
   limitations.  The protocol's trust is ultimately rooted in the DNS
   hierarchy, including the root zone and TLD operators.

2.3.  Key Components

   The DomainAuth protocol consists of the following core components:

   1.  *DomainAuth TXT Record:* A DNS TXT record at _domainauth.<domain>
       containing the organisation's public key information, including
       key algorithm, key id type, key id, TTL override, and optional
       service OID.

   2.  *Organisation Certificate:* A self-issued X.509 certificate
       containing the organisation's public key.  This certificate
       serves as the root Certificate Authority (CA) for all
       certification paths and digital signatures under the
       organisation's domain.

   3.  *Member Certificates:* X.509 certificates issued by the
       organisation to individual users or bots.  User certificates
       include the username in the Common Name field, whilst bot
       certificates use the at sign (@) as their Common Name.

   4.  *DNSSEC Chain:* A serialised collection of DNS responses that
       provide cryptographic proof of the authenticity of the
       organisation's DomainAuth TXT record.

   5.  *Member Id Bundle:* A structure containing a member certificate,
       the issuing organisation certificate, and the DNSSEC chain
       necessary to verify the organisation's authority.

   6.  *Signature Bundle:* A structure containing a CMS SignedData
       value, the organisation certificate, and the DNSSEC chain.  There
       are two types of bundles, which determine the signer of the
       SignedData value:

       *  *Member Signature Bundles* are signed by a member.

       *  *Organisation Signature Bundles* are signed directly by the
          organisation, but attributed to a specific member.

   These components work together to create a secure chain of trust from
   the DNS root to the individual signatures produced by organisation
   members or by the organisation itself.

2.4.  Workflow Summary

   The DomainAuth protocol involves the following key workflows:

2.4.1.  Organisation Setup

   First, the organisation must have DNSSEC properly configured for its
   domain.

   Then, the organisation must generate an asymmetric key pair and
   publish its public key information in a DomainAuth TXT record at
   _domainauth.<domain>.

   Multiple such records are allowed, which can be useful for key
   rotation or binding different keys to different services.

2.4.2.  Certificate Issuance

   The organisation must self-issue an X.509 certificate using its
   private key, or reuse an existing certificate valid during the
   intended validity period.

   When issuing a member certificate, the organisation must distribute
   it along with the organisation certificate.  This can be done with a
   member id bundle, which is desirable in services meant to be used
   offline as it also contains the DNSSEC chain.

2.4.3.  Signature Bundle Production

   A member would produce a signature bundle as follows:

   1.  Use their private key to produce a CMS SignedData structure,
       encapsulating the member's certificate.

   2.  Obtain the DNSSEC chain from the DomainAuth TXT record.  If not
       provided by the organisation (e.g. in the form of a member id
       bundle), the member will have to resolve it or retrieve it from a
       cache.

   3.  Construct a signature bundle with the CMS SignedData structure,
       the organisation certificate, and the DNSSEC chain.

   Similarly, an organisation would produce a signature bundle as
   follows:

   1.  Use its private key to produce a CMS SignedData structure,
       without encapsulating the organisation's certificate.

   2.  Resolve the DNSSEC chain from the DomainAuth TXT record, or use a
       cached chain valid during the intended validity period.

   3.  Construct a signature bundle with the CMS SignedData structure,
       the organisation certificate, and the DNSSEC chain.

2.4.4.  Signature Bundle Verification

   The verification process involves validating the entire chain of
   trust as follows:

   1.  Verify the DNSSEC chain.

   2.  Verify the organisation certificate using the public key from the
       TXT record.

   3.  Determine the certificate of the signer of the CMS SignedData
       structure.  If it is an organisation signature, use the
       organisation certificate.  Otherwise, use the certificate of the
       member, which is encapsulated in the CMS SignedData structure.

   4.  Verify the CMS SignedData structure against the certificate of
       the signer.

   5.  Verify that the signature is valid for the intended service and
       time period.

   Alternatively, the verifier can start with the digital signature,
   then verify the organisation certificate and finally the DNSSEC
   chain.

   For more detailed information on the verification process,
   particularly regarding validity periods, see Section 7.4.

3.  DNS Integration

3.1.  DNSSEC Configuration

   Participating domains MUST have a complete DNSSEC chain of trust from
   the root zone to the DomainAuth TXT record.

3.2.  TXT Record

   Each organisation participating in the DomainAuth protocol MUST
   publish a TXT record at _domainauth.<domain> with the following
   fields separated by simple spaces:

   1.  *Version* (required): An integer denoting the version of the
       DomainAuth TXT record format, set to 0 (zero) for this version of
       the specification.

   2.  *Key Algorithm* (required): An integer denoting the key
       algorithm:

       *  1: RSA-PSS with modulus 2048 bits.

       *  2: RSA-PSS with modulus 3072 bits.

       *  3: RSA-PSS with modulus 4096 bits.

   3.  *Key Id Type* (required): An integer denoting how the key is
       identified:

       *  1: The key id is the SHA-256 digest of the key.

       *  2: The key id is the SHA-384 digest of the key.

       *  3: The key id is the SHA-512 digest of the key.

   4.  *Key Id* (required): The Base64-encoded (unpadded) representation
       of the key digest, as specified by the Key Id Type.

   5.  *TTL Override* (required): A positive integer representing the
       number of seconds for the maximum validity period of signatures.
       This value MUST be between 1 second and 7,776,000 seconds (90
       days).

   6.  *Service OID* (optional): An Object Identifier (in dotted decimal
       notation) binding the key to a specific service.  If omitted, the
       key is valid for any service.

   Multiple TXT records MAY be published at the same zone to support
   different keys, key algorithms, or services.

   Verifiers MUST select the appropriate TXT record based on the key
   information and service OID in the signature being verified.

   For example, the following TXT record specifies an RSA-2048 key
   identified by its SHA-512 digest with a TTL override of 24 hours
   (86400 seconds) and no service binding:

_domainauth.example.com. IN TXT "0 1 3 dGhpcyBpcyBub3QgYSByZWFsIGtleSBkaWdlc3Q 86400"

3.3.  TTL Override

   The TTL override field in the DomainAuth TXT record enables
   verification of DNS records and DNSSEC signatures for longer periods
   than their respective specifications would allow, which is essential
   for delay-tolerant use cases where users may be offline for extended
   periods.

   DNS records and DNSSEC signatures typically have TTL values that may
   be as short as a few minutes or hours.  The TTL override mechanism
   allows the DNSSEC chain to remain verifiable for up to 90 days,
   regardless of the TTL in such records.

   During verification, the TTL override creates a restricted time
   window that extends backwards from the end of the requested
   verification period by the specified number of seconds.  Verification
   will succeed if the DNSSEC records were valid at any point during
   this window, even if the standard DNS TTLs would have expired.

   For example, if a DNS record has a standard TTL of 3600 seconds (1
   hour) but the DomainAuth TXT record specifies a TTL override of
   604,800 seconds (7 days), a signature can still be verified up to 7
   days after creation, even when offline.  If a verifier attempts to
   verify a signature 5 days after it was created, the verification
   would succeed with the TTL override, whereas it would fail with only
   the standard 1-hour TTL.

3.4.  DNSSEC Chain Serialisation

   The serialised chain MUST be encoded as the ASN.1 DnssecChain
   structure below, where each OCTET STRING contains a complete DNS
   message as defined in [DNS]:

   DnssecChain ::= SET OF OCTET STRING

   This chain MUST include all DNSSEC responses necessary to validate
   the _domainauth.<domain>/TXT record from the trust anchor.  However,
   the root zone DS records SHOULD be omitted, since they will be
   ignored by verifiers as described in Section 7.4.

   Implementations SHOULD optimise the serialisation to minimise
   redundancy and size whilst ensuring completeness for offline
   verification.

4.  Cryptographic Foundation

4.1.  Supported Algorithms

   DomainAuth relies on established cryptographic algorithms to ensure
   security and interoperability.  The protocol defines the following
   supported algorithms:

   1.  *Hashing Algorithms:* - SHA-256: Recommended for general use.  -
       SHA-384: Recommended for higher security applications.  - SHA-
       512: Recommended for highest security applications.

   2.  *Digital Signature Algorithms:* - RSA-PSS with modulus 2048 bits:
       Minimum acceptable security level.  - RSA-PSS with modulus 3072
       bits: Recommended for general use.  - RSA-PSS with modulus 4096
       bits: Recommended for high-security applications.

   All compliant implementations MUST support these algorithms.  The
   choice of algorithm strength should be appropriate for the security
   requirements of the application.

   For RSA-PSS signatures:

   *  RSA-2048 MUST use SHA-256 for both key identification and
      signature operations.

   *  RSA-3072 MUST use SHA-384 for both key identification and
      signature operations.

   *  RSA-4096 MUST use SHA-512 for both key identification and
      signature operations.

   Future versions of the protocol MAY introduce additional algorithms,
   but this V1 specification intentionally limits the supported
   algorithms to those with well-established security properties and
   widespread implementation support.

4.2.  Key Management

   Proper key management is essential for the security of the DomainAuth
   protocol.  The following requirements apply:

   1.  *Key Generation:* - Keys MUST be generated using a
       cryptographically secure random number generator.  - RSA key
       generation MUST follow industry best practices for prime
       generation and testing.  - The minimum modulus size for RSA keys
       is 2048 bits.

   2.  *Key Storage:* - Private keys MUST be protected from unauthorised
       access.  - Organisation private keys SHOULD be stored with the
       highest level of protection available, preferably in hardware
       security modules (HSMs).  - Member private keys SHOULD be
       protected with appropriate measures, such as operating system
       security mechanisms or hardware tokens.

   3.  *Key Rotation:* - Organisations SHOULD establish a regular
       schedule for rotating their keys.  - Key rotation SHOULD be
       performed by generating a new key pair and updating the
       DomainAuth TXT record.  - During key rotation, organisations
       SHOULD maintain both the old and new keys in DNS for a transition
       period, allowing for graceful migration.  - Member certificates
       issued under the old key remain valid until their expiration but
       SHOULD be renewed under the new key when practical.

   4.  *Key Compromise:* - In the event of a key compromise, immediate
       rotation is REQUIRED.  - The compromised key's TXT record SHOULD
       be removed as soon as possible.  - Short certificate lifetimes
       help mitigate the impact of key compromises.

   Implementations SHOULD provide guidance and tools to assist with
   secure key management practices appropriate to the security
   requirements of the organisation.

4.3.  Certificate Structure

   DomainAuth uses X.509 certificates with specific requirements for
   organisations and members.  All certificates MUST comply with the
   X.509v3 standard (RFC 5280).

4.3.1.  Organisation Certificate Profile:

   1.  *Version:* MUST be v3 (value = 2).

   2.  *Subject:* CommonName (CN) MUST contain the organisation's domain
       name.

   3.  *Issuer:* MUST be identical to the Subject (self-issued).

   4.  *Validity:* - SHOULD be appropriate for the organisation's key
       rotation policy.  - SHOULD NOT exceed 1 year.

   5.  *Subject Public Key Info:* - Algorithm: rsaEncryption.  - Key
       size: 2048, 3072, or 4096 bits.

   6.  *Extensions:* - Basic Constraints:

       *  MUST be present and marked critical.

       *  CA flag MUST be TRUE.

       *  Path length constraint MAY be present.  - Subject Key
          Identifier: MUST be present.  - Authority Key Identifier: MUST
          be present and match the Subject Key Identifier.

4.3.2.  Member Certificate Profile:

   1.  *Version:* MUST be v3 (value = 2).

   2.  *Subject:* - CommonName (CN):

       *  For users: MUST contain the username.

       *  For bots: MUST be the at sign (@).

   3.  *Issuer:* - MUST match the Subject of the issuing organisation
       certificate.

   4.  *Validity:* - SHOULD be short-lived, preferably not exceeding 90
       days.  - MUST NOT be longer than the validity period of the
       issuing organisation certificate.

   5.  *Subject Public Key Info:* - Algorithm: rsaEncryption.  - Key
       size: 2048, 3072, or 4096 bits.

   6.  *Extensions:* - Basic Constraints:

       *  MUST be present and marked critical.

       *  CA flag MUST be FALSE.  - Subject Key Identifier: MUST be
          present.  - Authority Key Identifier: MUST be present and
          match the Subject Key Identifier of the issuing certificate.

   Certificates MUST NOT include extensions not specified in this
   profile without careful consideration of their security implications.

4.4.  Signature Format

   DomainAuth signatures use the Cryptographic Message Syntax (CMS) as
   defined in RFC 5652, with specific requirements for the DomainAuth
   protocol:

   1.  *SignedData Structure:* - The content type MUST be id-data
       (1.2.840.113549.1.7.1).  - The version MUST be 3.  - The
       digestAlgorithms set MUST include the algorithm used for signing.
       - The encapContentInfo content field MAY be absent for detached
       signatures.

   2.  *Signer Info:* - For member signatures, the SignerInfo structure
       MUST include the signer's certificate.  - For organisation
       signatures, the signer's certificate MAY be included if it
       differs from the organisation certificate in the signature
       bundle.  - Both signature types MAY include intermediate
       certificates if the signer's certificate is issued through a
       certification path from the organisation certificate.  - The
       digest algorithm MUST match the key strength (SHA-256 for RSA-
       2048, etc.).  - The signature algorithm MUST be RSA-PSS.

   3.  *Signed Attributes:* - MUST include the content type attribute
       (1.2.840.113549.1.9.3).  - MUST include the message digest
       attribute (1.2.840.113549.1.9.4).  - MUST include the DomainAuth
       signature metadata attribute (1.3.6.1.4.1.58708.1.0) containing:

       *  Service OID: The OID of the service for which the signature is
          valid.

       *  Validity period: The start and end dates for signature
          validity.  - For organisation signatures, MUST include the
          DomainAuth member attribution attribute
          (1.3.6.1.4.1.58708.1.2) containing:

       *  A UTF8String identifying the member to whom the organisation
          attributes the content.

   4.  *Certificate Chain:* - For member signatures, MUST include the
       member's certificate.  - For organisation signatures where the
       signer is not the organisation itself (e.g., a delegated signer),
       MUST include the signer's certificate.  - MAY include
       intermediate certificates if applicable.  - MUST NOT include the
       organisation certificate from the signature bundle.

   The DomainAuth signature metadata is encoded as an ASN.1 structure
   and is defined in section 7.3.

5.  Identity Model

5.1.  Organisations

   In the DomainAuth protocol, an organisation is represented by a
   domain name and serves as the foundational identity unit.
   Organisations have full control over their DomainAuth implementation
   and member management.

   Organisations MUST:

   1.  Own or control a domain name with properly configured DNSSEC.

   2.  Generate and safeguard an RSA key pair for their organisation
       certificate.

   3.  Self-issue an X.509 certificate with the domain name as the
       CommonName.

   4.  Publish a DomainAuth TXT record at _domainauth.<domain> with the
       appropriate key information.

   5.  Manage the issuance and revocation of member certificates.

   The organisation is the trust anchor for all certificates and
   signatures within its domain.  No external authority can issue valid
   certificates for the organisation or its members.

   Newly registered domains SHOULD wait at least the maximum TTL (90
   days) before implementing DomainAuth to prevent potential attacks
   using DNSSEC chains from previous domain owners.

   Subdomains MAY implement DomainAuth separately from their parent
   domains, provided they have their own DNSSEC configuration.  Each
   subdomain operates as an independent organisation within the
   DomainAuth ecosystem.

5.2.  Members

   Members are entities that act on behalf of an organisation and come
   in two forms: users and bots.

   *Users:*

   *  Represent individual people within an organisation.

   *  Identified by a username within the organisation's domain (e.g.,
      alice.smith@example.com).

   *  Their certificates MUST have the username as the CommonName.

   *  Usernames MUST comply with the naming restrictions specified in
      section 5.3.

   *Bots:*

   *  Represent automated processes acting on behalf of the organisation
      as a whole.

   *  Identified by the organisation's domain name (e.g., example.com).

   *  Their certificates MUST have the at sign (@) as the CommonName.

   *  Internally, organisations MAY assign private identifiers to bots
      for management purposes, but these identifiers MUST NOT be
      included in certificates.

   Members are issued certificates by their organisation, which
   authorises them to produce signatures on behalf of the organisation.
   These certificates bind the member identity to a public key and may
   include additional restrictions on their use.

   The protocol makes a clear distinction between users (who represent
   individuals) and bots (which represent the organisation itself),
   reflected in both the certificate structure and the resulting
   signature verification output.

5.3.  Naming Conventions and Restrictions

   DomainAuth imposes specific restrictions on member names to prevent
   phishing attacks and ensure consistent processing across
   implementations:

   1.  *User Names:* - MUST NOT contain at signs (@).  - MUST NOT
       contain whitespace characters other than simple spaces (e.g., no
       tabs, newlines, carriage returns).  - SHOULD be chosen to avoid
       visual confusion with other usernames.  - SHOULD use consistent
       case and normalisation forms.

   2.  *Display Considerations:* - User interfaces SHOULD NOT truncate
       usernames or domain names.  - Implementations SHOULD display
       member identifiers in full to avoid confusion.  - Implementations
       SHOULD highlight or visually distinguish the domain portion of
       identifiers.

   3.  *Homographic Attack Prevention:* - Implementations SHOULD
       implement mitigations against homographic attacks.  - Domain
       names SHOULD be displayed using Punycode when they contain non-
       ASCII characters.  - Implementations MAY refuse to process
       signatures from domains with mixed scripts.

   4.  *Bot Names:* - MUST use the at sign (@) as the CommonName in
       certificates.  - When displaying bot identities, implementations
       SHOULD clearly indicate they represent the organisation rather
       than an individual.

   Organisations SHOULD establish and enforce consistent naming policies
   for their users to maintain clarity and prevent confusion.

6.  Certificate Management

6.1.  Organisation Certificate Issuance

   Organisation certificates form the foundation of the DomainAuth trust
   model and MUST be self-issued by the organisation.

   The process for issuing an organisation certificate is as follows:

   1.  The organisation generates an RSA key pair with a modulus of
       2048, 3072, or 4096 bits.

   2.  The organisation creates a self-signed X.509 certificate with the
       following characteristics: - Subject and Issuer fields both
       containing the organisation's domain name as CommonName.  - A
       validity period appropriate for the organisation's security
       policy.  - The Basic Constraints extension with the CA flag set
       to TRUE.  - Subject Key Identifier and Authority Key Identifier
       extensions.

   3.  The organisation calculates the appropriate key identifier as
       specified in the DomainAuth TXT Record Format (section 3.2).

   4.  The organisation publishes a DomainAuth TXT record at
       _domainauth.<domain> containing the key algorithm, key id type,
       key id, TTL override, and optional service OID.

   5.  The organisation ensures that DNSSEC is properly configured and
       that the TXT record is signed.

   The organisation certificate SHOULD be created with appropriate key
   management procedures, ideally using hardware security modules or
   similar protection mechanisms for the private key.

   Organisations MAY issue multiple organisation certificates with
   different keys for different purposes or for key rotation, publishing
   corresponding TXT records for each.

6.2.  Member Certificate Issuance

   Member certificates authorise specific members (users or bots) to
   produce signatures on behalf of the organisation.

   The process for issuing a member certificate is as follows:

   1.  The member generates an RSA key pair with a modulus of 2048,
       3072, or 4096 bits.

   2.  The member provides the public key to the organisation's
       certificate issuance system.

   3.  The organisation verifies the member's identity according to its
       internal policies.

   4.  The organisation issues an X.509 certificate with the following
       characteristics: - Subject CommonName containing the member's
       username (for users) or the at sign (@) (for bots).  - Issuer
       matching the Subject of the organisation certificate.  - A
       validity period appropriate for the member type and service
       requirements.  - The Basic Constraints extension with the CA flag
       set to FALSE.  - Subject Key Identifier extension.  - Authority
       Key Identifier matching the Subject Key Identifier of the
       organisation certificate.

   5.  The organisation delivers the certificate to the member through a
       secure channel.

   Organisations SHOULD implement appropriate authorisation checks and
   approval workflows before issuing member certificates.

   Service-specific extensions MAY be included in member certificates to
   restrict their use to specific contexts or applications.

6.3.  Certificate Validity Periods

   DomainAuth favours short-lived certificates over complex revocation
   mechanisms.  The following guidelines apply to certificate validity
   periods:

   1.  *Organisation Certificates:* - SHOULD have a validity period
       aligned with the organisation's key management policy.  - SHOULD
       NOT exceed 1 year.  - MAY be shorter if the organisation
       implements frequent key rotation.

   2.  *Member Certificates:* - SHOULD be short-lived, with validity
       periods of 90 days or less.  - MUST NOT exceed the validity
       period of the issuing organisation certificate.  - MAY be as
       short as a few hours for high-security applications.  - SHOULD
       balance security requirements with operational concerns about
       renewal frequency.

   3.  *Validity Period Intersection:* - For signature verification, the
       validity period is the intersection of:

       *  The organisation certificate validity period.

       *  The member certificate validity period.

       *  The signature metadata validity period.

       *  The DNSSEC record validity period (as determined by the TTL
          override).  - Signatures are only valid when the verification
          time falls within this intersection.

   Short certificate lifetimes provide natural revocation through
   expiration, reducing the complexity of the protocol and eliminating
   dependencies on online revocation checking mechanisms.

6.4.  Certificate Revocation

   DomainAuth primarily relies on short-lived certificates to manage
   certificate lifecycle, but situations may arise where explicit
   revocation is necessary.

   1.  *Organisation Certificates:* - Revocation is achieved by removing
       or updating the DomainAuth TXT record.  - Old signatures using
       the revoked certificate will no longer verify once the DNSSEC
       chain is refreshed.  - In case of key compromise, immediate
       removal of the TXT record is essential.

   2.  *Member Certificates:* - The primary revocation mechanism is
       natural expiration.  - For urgent revocation, organisations
       SHOULD maintain internal revocation lists.  - Implementations MAY
       provide additional revocation mechanisms appropriate to their
       specific needs.

   3.  *Revocation Checking:* - The DomainAuth protocol does not require
       online revocation checking.  - Implementations MAY implement
       additional revocation checking mechanisms.  - Any additional
       revocation mechanisms SHOULD be designed to work in offline
       scenarios.

   The reliance on short-lived certificates significantly reduces the
   impact of key compromise and the need for complex revocation
   infrastructures.  Organisations SHOULD issue member certificates with
   the shortest practical validity periods for their use cases.

7.  Signature Production and Verification

7.1.  Member Id Bundle

   The Member Id Bundle is a self-contained package that provides all
   the information needed for a member to produce verifiable signatures.
   It is serialised using ASN.1 DER encoding with the following
   structure:

   MemberIdBundle ::= SEQUENCE {
       version                  [0] INTEGER DEFAULT 0,
       dnssecChain              [1] DnssecChain,
       organisationCertificate  [2] Certificate,
       memberCertificate        [3] Certificate
   }

   Where:

   *  version is the format version (currently 0).

   *  dnssecChain contains the serialised DNSSEC chain proving the
      authenticity of the organisation's DomainAuth TXT record.

   *  organisationCertificate is the organisation's self-issued X.509
      certificate.

   *  memberCertificate is the X.509 certificate issued to the member by
      the organisation.

   The Member Id Bundle links the member to their organisation and
   provides all the cryptographic material needed to verify this
   relationship.  It serves as a precursor to signature production and
   is typically distributed to members by their organisation's
   certificate management system.

   Member Id Bundles are not inherently confidential, as they contain
   only public information, but their integrity is critical for secure
   signature production.

7.2.  Signature Bundle

   The Signature Bundle is the core artefact of the DomainAuth protocol,
   containing a digital signature and all the information needed to
   verify it offline.  It is serialised using ASN.1 DER encoding with
   the following structure:

   SignatureBundle ::= SEQUENCE {
       version                  [0] INTEGER DEFAULT 0,
       dnssecChain              [1] DnssecChain,
       organisationCertificate  [2] Certificate,
       signature                [3] ContentInfo
   }

   Where:

   *  version is the format version (currently 0).

   *  dnssecChain contains the serialised DNSSEC chain proving the
      authenticity of the organisation's DomainAuth TXT record.

   *  organisationCertificate is the organisation's self-issued X.509
      certificate.

   *  signature is a CMS ContentInfo containing a SignedData structure.

   DomainAuth supports two types of signature bundles, which share the
   same structure but differ in their content and verification process:

   1.  *Member signatures:* The SignedData structure contains: - The
       member certificate (and any intermediate certificates if
       applicable).  - The digital signature over the content, produced
       using the member's private key.  - Signature attributes,
       including the DomainAuth signature metadata.  - Optionally, the
       signed content itself (for encapsulated signatures).

   2.  *Organisation signatures:* The SignedData structure contains: -
       The digital signature over the content, produced using the
       organisation's private key.  - Signature attributes, including
       the DomainAuth signature metadata.  - The member attribution
       attribute identifying the member who authored the content.  -
       Optionally, intermediate certificates if the organisation uses a
       certification path.  - Optionally, the signed content itself (for
       encapsulated signatures).

   The signature type is determined by the presence of the member
   attribution attribute: if present, it's an organisation signature; if
   absent, it's a member signature.

   For detached signatures, the plaintext content must be provided
   separately during verification.

   The Signature Bundle is self-contained and provides all the
   information needed for offline verification of the signature, without
   requiring any network lookups or external data sources.

7.3.  Signature Metadata

   Each DomainAuth signature includes metadata that binds it to a
   specific service and validity period.  This metadata is included as a
   signed attribute in the CMS SignedData structure, ensuring it cannot
   be modified without invalidating the signature.

   The signature metadata is encoded as an ASN.1 structure:

   SignatureMetadata ::= SEQUENCE {
       serviceOid      [0] OBJECT IDENTIFIER,
       validityPeriod  [1] DatePeriod
   }

   DatePeriod ::= SEQUENCE {
       start  [0] GeneralizedTime,
       end    [1] GeneralizedTime
   }

   Where:

   *  serviceOid is the Object Identifier of the service for which the
      signature is valid.

   *  validityPeriod specifies the time period during which the
      signature is considered valid.

   The signature metadata serves several key purposes:

   1.  *Service binding:* Prevents signatures created for one service
       from being reused in another context.

   2.  *Temporal scoping:* Allows signers to limit the validity period
       of signatures independent of certificate lifetimes.

   3.  *Freshness indication:* Provides verifiers with information about
       when the signature was created.

   Verifiers MUST check that the signature metadata's service OID
   matches the expected service and that the verification time falls
   within the specified validity period.

   The validity period in the signature metadata is intersected with the
   validity periods of certificates and DNSSEC records to determine the
   overall validity period of the signature.

7.4.  Verification Process

   The verification of a DomainAuth signature involves multiple steps
   that validate the entire chain of trust from the DNSSEC
   infrastructure to the signature itself.  Implementations MUST perform
   the following verification steps:

   1.   *Establish the required validity period:*

        *  The verification process involves tracking the intersection
           of the required validity period and the validity period of
           all the components of the signature bundle (i.e. DNSSEC RRSIG
           records, X.509 certificates, and the digital signature).

        *  The required validity period can be a specific time (e.g. the
           current time), or a time range where the signature bundle
           needs to be valid for at least some moment within that range.

        *  Even a brief one-second overlap between the bundle's validity
           period and the required period is sufficient.

        *  Service requirements heavily influence this; for example, an
           offline service might accept a bundle valid at any point in
           the past 30 days, whilst an online service might require
           validity at verification time.

        *  If there is no intersection between the required period and
           the validity periods of all components, the signature bundle
           is invalid.

   2.   *Parse the Signature Bundle:*

        *  Extract the DNSSEC chain, organisation certificate, and CMS
           signature.

        *  Validate the structure of each component.

   3.   *Validate the DNSSEC chain:*

        *  Verify that the chain starts from a trusted DNSSEC anchor.

        *  The root zone DS records MUST be provided by the verifier.
           Any root zone DS records included in the DNSSEC chain MUST be
           ignored.

        *  Verify all DNSSEC signatures in the chain.

        *  Confirm that the chain leads to the _domainauth.<domain> TXT
           record.

        *  Extract the organisation's public key information from the
           TXT record.

   4.   *Validate the organisation certificate:*

        *  Verify that the certificate's public key matches the key
           identified in the TXT record.

        *  Verify that the certificate's CommonName matches the domain
           name.

        *  Confirm that the certificate is self-signed and valid.

        *  Check that the certificate has the CA flag set in the Basic
           Constraints extension.

   5.   *Determine the signature type:*

        *  Extract the signed attributes from the CMS SignedData
           structure.

        *  Check for the presence of the member attribution attribute
           (1.3.6.1.4.1.58708.1.2).

        *  If the member attribution attribute is present, it is an
           organisation signature.

        *  If the member attribution attribute is absent, it is a member
           signature.

   6.   *Extract and validate certificates:*

        *  Extract the organisation certificate from the signature
           bundle.

        *  Extract the signer's certificate from the CMS SignedData
           structure if present.

           -  For member signatures, the signer's certificate MUST be
              present.

           -  For organisation signatures, the signer's certificate MAY
              be present if it differs from the organisation
              certificate.

        *  Construct and validate the certification path:

           -  The path starts with the organisation certificate from the
              signature bundle.

           -  The path ends with the signer's certificate (which may be
              the organisation certificate itself for organisation
              signatures).

           -  Any intermediate certificates in the SignedData structure
              MUST be included in the path.

        *  Verify that all certificates in the path are valid at the
           verification time.

   7.   *Validate the signature metadata:*

        *  Extract the service OID and validity period from the
           signature metadata attribute.

        *  Verify that the service OID matches the expected service.

        *  Confirm that the verification time falls within the signature
           validity period.

   8.   *Determine the overall validity period:*

        *  Calculate the intersection of:

           -  The validity periods of all certificates in the
              certification path, from the organisation certificate to
              the signer's certificate (if different).

           -  The signature metadata validity period.

           -  The DNSSEC chain validity period, applying the TTL
              override from Section 3.3.

        *  Verifiers MAY enforce a TTL shorter than that required by the
           service, but not shorter than the 1-second minimum.

        *  Verifiers MAY allow their end users to specify a shorter TTL
           (but still not shorter than 1 second) than the one in the TXT
           record.

        *  Verify that the verification time falls within this
           intersection.

   9.   *Verify the digital signature:*

        *  Use the signer's public key to verify the signature over the
           content.

        *  For detached signatures, use the externally provided content.

        *  For encapsulated signatures, extract the content from the CMS
           structure.

   10.  *Produce verification output:*

        *  Always include the organisation name.

        *  Include the member name (for users only, not for bots):

           -  For member signatures, from the signer certificate.

           -  For organisation signatures, from the member attribution.

        *  Always include the signature type (member or organisation).

   If all these steps succeed, the signature is considered valid, and
   the content is confirmed to originate from the identified member of
   the specified organisation or from the organisation itself.

   The verification process MUST be performed in full, without skipping
   any steps, to ensure the security properties of the DomainAuth
   protocol.

7.5.  Member Attribution

   For organisation signatures, a required signed attribute is included
   in the CMS SignedData structure to attribute the content to a
   specific member:

   MemberAttribution ::= UTF8String

   The member attribution attribute (1.3.6.1.4.1.58708.1.2) serves the
   following purposes:

   1.  *Content authorship:* Indicates which member authored the
       content, even when the organisation signs directly.

   2.  *Operational flexibility:* Allows organisations to produce
       signatures on behalf of members without requiring certificate
       management for ephemeral members.

   3.  *Accountability:* Maintains a record of which member is
       responsible for the content, even when using organisation
       signatures.

   4.  *Signature type identification:* Enables reliable determination
       of the signature type during verification.

   The member attribution value MUST conform to the same naming
   conventions defined for member names in section 5.3.  For users, this
   is the username; for bots, this is the at sign (@).

   Member attribution is a claim made by the organisation, not
   cryptographically proven by the member.  Verifiers MUST present this
   distinction clearly to end users.

8.  Service Integration

8.1.  Service OIDs

   DomainAuth uses Object Identifiers (OIDs) to uniquely identify
   services and applications that use the protocol.  Service OIDs serve
   as namespaces that prevent signature reuse across different contexts.

   1.  *OID Structure:* - The DomainAuth root OID is
       1.3.6.1.4.1.58708.1.  - Official service OIDs MUST be allocated
       under this root.  - For example, the test service OID is
       1.3.6.1.4.1.58708.1.1.

   2.  *OID Allocation:* - Service designers MUST obtain a unique OID
       for their service.  - Third-party services MUST use OIDs from
       their own namespace.  - The DomainAuth OID arc is reserved
       exclusively for official services under the DomainAuth project
       umbrella.

   3.  *OID Usage:* - The service OID MUST be included in the signature
       metadata.  - Verifiers MUST check that the OID in the signature
       matches the expected service.  - DomainAuth TXT records MAY
       specify a service OID to restrict key usage.

   4.  *Versioning:* - Service designers SHOULD include version
       information in their OID structure.  - Major protocol changes
       SHOULD use a new OID.  - Minor, backward-compatible changes MAY
       use the same OID.

   Service OIDs ensure that signatures created for one service cannot be
   repurposed for another, even if all other aspects of the signature
   are valid.  This provides important namespace isolation and prevents
   cross-service attacks.

8.2.  Service-Specific Validation Rules

   Services using DomainAuth MAY define additional validation rules
   beyond the core protocol requirements.  These rules allow services to
   implement domain-specific security policies.

   1.  *TTL Constraints:* - Services MUST specify a maximum TTL for
       signatures.  - The TTL MUST be within the range of 1 second to 90
       days.  - For the minimum TTL, several minutes is recommended to
       account for clock drift.  - Services SHOULD choose the shortest
       TTL that meets their requirements.

   2.  *Content Type Restrictions:* - Services MAY restrict the types of
       content that can be signed.  - Content type restrictions SHOULD
       be documented in the service specification.  - Verifiers SHOULD
       check content type compliance during verification.

   3.  *Member Type Restrictions:* - Services MAY restrict which member
       types can produce valid signatures.  - For example, a service
       might only accept signatures from users (not bots).  - Such
       restrictions SHOULD be enforced during verification.

   4.  *Certificate Extensions:* - Services MAY define custom
       certificate extensions for additional authorisation.  - Such
       extensions SHOULD be clearly documented.  - Verifiers MUST check
       for and validate any required extensions.

   Service designers SHOULD document their validation rules
   comprehensively to ensure consistent implementation across different
   verifiers.  These rules SHOULD be designed to maintain the security
   properties of the DomainAuth protocol while addressing service-
   specific requirements.

8.3.  Implementation Guidelines

   Service developers integrating DomainAuth should adhere to the
   following guidelines to ensure secure and consistent implementation:

   1.  *User Interface Considerations:* - Clearly display the full
       member identifier (username and domain).  - Visually distinguish
       between user and bot signatures.  - Indicate when signatures are
       expired or otherwise invalid.  - Avoid truncating or eliding
       parts of member identifiers.

   2.  *Error Handling:* - Provide clear, actionable error messages for
       verification failures.  - Distinguish between different types of
       validation errors.  - Log detailed information about verification
       failures for debugging.  - Never fall back to less secure
       verification methods on failure.

   3.  *Integration Patterns:* - Separate signature verification from
       application logic.  - Implement verification as a self-contained
       module or library.  - Use dependency injection to allow for
       testing and component replacement.  - Consider signature
       verification as a security boundary in the application.

   4.  *Performance Optimisations:* - Cache verification results when
       appropriate (respecting validity periods).  - Implement efficient
       ASN.1 parsing routines.  - Consider performance implications of
       cryptographic operations.  - Balance security requirements with
       resource constraints.

   5.  *Testing:* - Test with a variety of valid and invalid signatures.
       - Include edge cases in test scenarios.  - Verify correct
       handling of expired certificates.  - Test with different key
       sizes and algorithms.  - Ensure verification fails as expected
       with tampered data.

   These guidelines help ensure that DomainAuth integrations provide
   consistent security properties and user experience across different
   implementations and platforms.

9.  Implementation Guidance

9.1.  Interoperability Considerations

   To ensure interoperability between different DomainAuth
   implementations:

   1.  *Strict Validation:* - Implementations MUST strictly validate all
       inputs.  - Implementations MUST reject malformed data rather than
       attempting to repair it.  - ASN.1 parsing MUST be strict and
       reject any non-conformant encodings.

   2.  *Format Compatibility:* - Implementations MUST correctly handle
       all ASN.1 DER encoding rules.  - Implementations MUST handle BER-
       encoded ASN.1 if the encoding is also valid DER.  - X.509
       extensions MUST be encoded correctly.

   3.  *Character Encoding:* - Implementations MUST handle UTF-8 encoded
       strings correctly.  - Domain names SHOULD be handled in their
       ASCII form after Punycode conversion.  - Usernames MUST be
       compared using case-sensitive comparison.

   4.  *Time Representation:* - Implementations SHOULD use UTC (Z
       suffix) in all GeneralizedTime values, including those in X.509
       certificates.  - When timezone information is absent from a
       GeneralizedTime value in any DomainAuth structure,
       implementations MUST interpret it as UTC.  - Implementations MUST
       correctly handle and compare GeneralizedTime values with
       different timezone representations.

   5.  *Algorithm Support:* - Implementations MUST support all mandatory
       cryptographic algorithms.  - Implementations MAY support
       additional algorithms for future compatibility.  -
       Implementations MUST reject signatures using unsupported
       algorithms.

   6.  *Version Handling:* - Implementations MUST check version fields
       in all structures.  - Implementations MUST reject structures with
       unsupported versions.  - Implementations SHOULD be designed to
       accommodate future versions.

   Regular interoperability testing between different implementations is
   recommended to ensure ongoing compatibility.

9.2.  Performance Optimisations

   DomainAuth implementations can benefit from several performance
   optimisations whilst maintaining security:

   1.  *Caching Strategies:* - Cache parsed certificates and DNSSEC
       chains to avoid repeated parsing.  - Cache verification results
       for the duration of their validity.  - Use LRU (Least Recently
       Used) or similar algorithms for cache management.  - Ensure cache
       entries are invalidated when they expire.

   2.  *Size Optimisations:* - Minimise the size of DNSSEC chains by
       removing redundant records.  - Use the minimum required set of
       certificates in signature bundles.  - Consider compression for
       storage or transmission (whilst maintaining original formats for
       cryptographic operations).

   3.  *Computational Efficiency:* - Use efficient ASN.1 parsing
       libraries.  - Implement lazy parsing for large structures.  -
       Consider hardware acceleration for cryptographic operations when
       available.  - Batch operations when processing multiple
       signatures.

   4.  *Memory Management:* - Implement streaming processing for large
       documents.  - Avoid keeping entire documents in memory when
       possible.  - Free resources promptly after use.  - Consider
       memory constraints on resource-limited devices.

   5.  *Parallel Processing:* - Parallelise independent verification
       steps when possible.  - Consider using worker threads for CPU-
       intensive operations.  - Balance parallelisation benefits against
       overhead costs.

   These optimisations MUST NOT compromise security or correctness.
   Performance-critical applications SHOULD profile their verification
   code to identify bottlenecks and focus optimisation efforts
   accordingly.

9.3.  Member vs Organisation Signatures

   Developers integrating DomainAuth into their applications must decide
   whether to use member signatures or organisation signatures with
   member attribution.  This decision should be based on the specific
   requirements of the application and the security considerations
   outlined in Section 9.5.

9.3.1.  Implementation Recommendations

   1.  *Library/SDK Design:* - DomainAuth libraries and SDKs SHOULD
       provide distinct functions for creating member signatures and
       organisation signatures.  - Verification functions SHOULD be
       unified, with the signature type included in the verification
       output.  - Libraries SHOULD NOT require developers to specify the
       signature type during verification, as this should be determined
       automatically from the signature bundle.

   2.  *Use Case Considerations:* - Member signatures are recommended
       for applications where non-repudiation at the individual level is
       critical.  - Organisation signatures with member attribution are
       appropriate for applications where certificate management for
       individual members is impractical or where organisational
       accountability is sufficient.

   3.  *Hybrid Approaches:* - Some applications may benefit from
       supporting both signature types, allowing flexibility based on
       the specific context or user role.  - In hybrid implementations,
       clear policies should govern when each signature type is used.

9.3.2.  User Interface Recommendations

   1.  *Signature Type Indication:* User interfaces SHOULD clearly
       indicate whether a signature is a member signature or an
       organisation signature with member attribution.  Different visual
       indicators (icons, colors, labels) SHOULD be used to distinguish
       between the two signature types.

   2.  *Attribution Presentation:* For organisation signatures,
       interfaces SHOULD clearly indicate that the member attribution is
       a claim made by the organisation, not cryptographic proof.
       Example phrasing: Signed by example.com on behalf of alice rather
       than Signed by alice of example.com.

   3.  *Verification Details:* Interfaces SHOULD provide access to
       detailed verification information, including the full
       certification path and validity periods.  Advanced users SHOULD
       be able to view the complete verification process and results.

   4.  *Error Handling:* Clear error messages SHOULD be displayed when
       verification fails, with appropriate guidance for users.
       Different error handling may be appropriate for different
       signature types, reflecting their distinct trust models.

10.  Implementation Status

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [RFC7942], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

   _Note to RFC Editor: Please remove this section before publication._

   DomainAuth is the successor to the VeraId protocol as defined in
   [VERAID], which has fully-interoperable implementations as described
   below.  DomainAuth and VeraId are functionally identical, except for
   the following differences:

   *  DNS TXT record:

      -  Name: DomainAuth uses _domainauth.example.com., whilst VeraId
         uses _veraid.example.com..

      -  Value: DomainAuth requires the value to begin with the number
         0, denoting the version of the DomainAuth TXT record format,
         followed by a space.  This value does not have a version number
         in VeraId.

   VeraId is led by the author of this document, who intends to
   deprecate the VeraId specification in favour of DomainAuth and update
   the reference implementations to fully comply with this
   specification.

   All implementations listed below are undergoing independent security
   audits as of this writing, and their respective reports are expected
   to be published in April 2025.

10.1.  VeraId JavaScript Library

   *  Organisation: Relaycorp.

   *  URL: https://github.com/relaycorp/veraid-js

   *  Level of maturity: Used in production in the VeraId Authority
      application (see below).

   *  Coverage: The implementation covers the entire protocol as defined
      in [VERAID].

   *  Licensing: Freely distributable with acknowledgement (MIT
      licence).

   *  Contact: https://relaycorp.tech/

   *  Last updated: 2025

10.2.  VeraId JVM Library

   *  Organisation: Relaycorp.

   *  URL: https://github.com/relaycorp/veraid-jvm

   *  Level of maturity: Used in production in the Android-based offline
      messaging application [LETRO].

   *  Coverage: The implementation covers the entire protocol as defined
      in [VERAID], except for Organisation Signature Bundles.

   *  Licensing: Freely distributable with acknowledgement (Apache 2.0
      licence).

   *  Contact: https://relaycorp.tech/

   *  Last updated: 2025

10.3.  VeraId Authority

   *  Organisation: Relaycorp

   *  URL: https://github.com/relaycorp/veraid-authority

   *  Description: A multi-tenant, cloud-native application that allows
      organisations to manage their members and the issuance of their
      respective Member Id Bundles.

   *  Level of maturity: Used in production in the server-side component
      of Letro as documented in [LETRO-SERVER].

   *  Coverage: The implementation leverages the VeraId JavaScript
      Library to issue Member Id Bundles and Organisation Signature
      Bundles.

   *  Licensing: Business Source License version 1.1

   *  Contact: https://relaycorp.tech/

   *  Last updated: 2025

11.  Security Considerations

11.1.  DNSSEC Dependency

   DomainAuth's security model relies fundamentally on DNSSEC, which
   introduces specific security considerations:

   1.  *Trust Anchors:*

       *  The DomainAuth protocol inherits trust from the DNSSEC root
          zone.

       *  Compromise of the root KSK would undermine the entire system.

       *  Implementations MUST securely manage and update DNSSEC trust
          anchors.

   2.  *TLD Control:*

       *  Many TLDs are controlled by governments or private entities.

       *  A malicious TLD operator could theoretically issue fraudulent
          DNSSEC responses.

       *  Organisations SHOULD consider the governance of their TLD when
          assessing security.

   3.  *DNSSEC Implementation Vulnerabilities:*

       *  Flaws in DNSSEC implementations could affect DomainAuth
          security.

       *  Implementations SHOULD use well-tested, actively maintained
          DNSSEC libraries.

       *  Security updates for DNSSEC components SHOULD be promptly
          applied.

   4.  *DNSSEC Adoption:*

       *  Not all domains support DNSSEC, limiting DomainAuth adoption.

       *  DNSSEC misconfiguration can lead to verification failures.

       *  Organisations MUST properly maintain their DNSSEC
          configuration.

   5.  *Key Rollovers:*

       *  DNSSEC key rollovers at any level can temporarily affect
          verification.

       *  Organisations SHOULD follow best practices for DNSSEC key
          management.

       *  Implementations SHOULD handle temporary DNSSEC validation
          failures gracefully.

   Whilst these dependencies introduce potential vulnerabilities, the
   distributed nature of DNS provides significant security advantages
   compared to centralised PKI models, particularly for offline
   verification scenarios.

11.2.  Homographic and Character Encoding Attacks

   User-friendly identifiers like domain names and usernames are
   susceptible to visual spoofing attacks:

   1.  *Homographic Attacks:*

       *  Different Unicode characters that appear visually similar can
          be used for spoofing.

       *  For example, Cyrillic "о" (U+043E) looks similar to Latin "o"
          (U+006F).

       *  Implementations SHOULD detect and warn about mixed-script
          identifiers.

       *  User interfaces SHOULD display domain names in Punycode when
          they contain non-ASCII characters.

   2.  *Normalisation Issues:*

       *  Different Unicode normalisation forms can represent the same
          visual character.

       *  Implementations SHOULD normalise identifiers before display or
          comparison.

       *  The preferred normalisation form is NFC (Normalization Form
          C).

   3.  *Bidirectional Text:*

       *  Bidirectional text can be manipulated to hide or reorder parts
          of identifiers.

       *  Implementations SHOULD apply the Unicode Bidirectional
          Algorithm correctly.

       *  User interfaces SHOULD clearly indicate reading direction for
          identifiers.

   4.  *Display Guidelines:*

       *  User interfaces MUST NOT truncate usernames, domain names, or
          identifiers.

       *  Identifiers SHOULD be displayed with a distinct font or style.

       *  Domain and username portions SHOULD be visually
          differentiated.

       *  Implementations SHOULD consider using visual security
          indicators.

   These attacks primarily affect human perception rather than
   cryptographic verification.  Proper implementation of user interfaces
   is critical to help users correctly identify the source of signed
   content.

11.3.  Domain Ownership Changes

   Domain transfers present specific security challenges for the
   DomainAuth protocol:

   1.  *Waiting Period:*

       *  Organisations SHOULD delay implementing DomainAuth until at
          least the maximum TTL (90 days) has elapsed since the domain
          was registered or acquired.

       *  This prevents the DNSSEC chain from the previous owner from
          remaining valid.

   2.  *Signature Validity After Transfer:*

       *  Signatures created before a domain transfer remain
          cryptographically valid.

       *  Verifiers MAY implement additional checks for recent domain
          transfers.

       *  Service policies SHOULD address the handling of signatures
          across ownership changes.

   3.  *Domain Expiration:*

       *  Expired domains can be registered by new owners.

       *  Verifiers SHOULD consider domain registration date when
          processing signatures.

       *  Signatures SHOULD NOT be trusted if the domain has changed
          hands since issuance.

   4.  *Subdomain Delegation:*

       *  Changes in subdomain delegation may affect DomainAuth
          verification.

       *  Organisations SHOULD carefully manage subdomain delegation.

       *  Signature verification considers the state of delegations at
          verification time.

   Domain ownership changes represent a fundamental challenge to any
   domain-based authentication system.  DomainAuth's approach of using
   short-lived certificates and signatures helps mitigate these risks by
   limiting the time window during which historical signatures remain
   valid.

11.4.  Offline Verification Limitations

   Offline verification introduces specific security considerations:

   1.  *Time Synchronisation:*

       *  Accurate verification requires correct system time.

       *  Devices with incorrect clocks may incorrectly validate expired
          signatures.

       *  Implementations SHOULD check for obviously incorrect system
          time.

       *  Critical applications SHOULD use external time sources when
          available.

   2.  *Replay Attacks:*

       *  Valid signatures can be replayed beyond their intended
          context.

       *  Services SHOULD implement additional measures (e.g., nonces)
          for replay-sensitive operations.

       *  Signature metadata SHOULD include context-specific information
          when appropriate.

   3.  *Revocation Limitations:*

       *  Offline verification cannot check real-time revocation status.

       *  The protocol relies on short validity periods rather than
          revocation checking.

       *  In high-security contexts, verification SHOULD go online when
          possible to check current status.

   4.  *Freshness Guarantees:*

       *  Offline verification can only guarantee that a signature was
          valid at some point.

       *  Applications requiring strong freshness guarantees SHOULD use
          additional mechanisms.

       *  The signature validity period provides some time-bounding
          guarantees.

   5.  *Network Partition Attacks:*

       *  Adversaries may attempt to prevent devices from going online
          to check current status.

       *  Applications SHOULD track and report extended offline periods.

       *  Critical operations MAY require periodic online connectivity.

   These limitations are inherent to any offline verification system and
   reflect fundamental tradeoffs between availability and security.
   DomainAuth provides a balanced approach that offers strong
   verification guarantees whilst supporting offline operation.

11.5.  Organisation Signatures and Member Attribution

   Organisation signatures with member attribution introduce specific
   security considerations that implementers and developers should be
   aware of:

   1.  *Trust Model Shift:*

       *  Member signatures provide cryptographic proof that a specific
          member created the content, with the member's private key
          directly signing the content.

       *  Organisation signatures with member attribution provide only a
          claim by the organisation about which member authored the
          content, without cryptographic proof from the member.

       *  This distinction represents a fundamental shift in the trust
          model from cryptographic verification to organisational
          attestation.

   2.  *Potential for Misattribution:*

       *  Organisations have the technical ability to attribute content
          to any member, whether or not that member actually created the
          content.

       *  Malicious or compromised organisations could falsely attribute
          content to members who did not create it.

       *  This risk is mitigated by the fact that the organisation must
          still sign the content with its private key, creating an
          auditable record of the attribution.

   3.  *Accountability Considerations:*

       *  Member signatures create direct cryptographic accountability
          for the member.

       *  Organisation signatures shift accountability to the
          organisation, even when content is attributed to a specific
          member.

       *  Legal and regulatory frameworks may treat these different
          types of signatures differently with respect to non-
          repudiation and liability.

   4.  *Operational Security:*

       *  Organisation signatures require access to the organisation's
          private key, which should be more tightly controlled than
          member private keys.

       *  Organisations should implement strict access controls and
          audit mechanisms for the use of organisation signatures,
          particularly when attributing content to members.

       *  The use of certification paths in organisation signatures
          introduces additional complexity and potential security
          vulnerabilities.

   5.  *Verification Presentation:*

       *  Verification interfaces MUST clearly distinguish between
          cryptographically proven member signatures and organisation
          signatures with member attribution.

       *  End users of applications implementing DomainAuth may need to
          be informed about the different trust implications of these
          signature types.

       *  Implementations SHOULD use distinct visual indicators or
          terminology to prevent confusion between the two signature
          types.

   To mitigate these risks, developers integrating DomainAuth SHOULD:

   *  Prefer member signatures over organisation signatures when
      practical.

   *  Limit the use of organisation signatures to specific use cases
      where certificate management for members is impractical.

   *  Implement strong audit logging for all organisation signatures,
      especially those with member attribution.

   *  Clearly communicate the distinction between signature types to end
      users.

   *  Consider implementing additional verification steps for
      organisation signatures with member attribution in high-security
      contexts.

12.  IANA Considerations

   This document has no IANA actions.

13.  References

13.1.  Normative References

   [ASN.1]    International Telecommunications Union, "Information
              Technology — ASN.1 encoding rules: Specification of Basic
              Encoding Rules (BER), Canonical Encoding Rules (CER) and
              Distinguished Encoding Rules (DER)", ITU-T Recommendation
              X.690, 1994.

   [CMS]      Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/rfc/rfc5652>.

   [DNS]      Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/rfc/rfc1035>.

   [DNSSEC]   Hoffman, P., "DNS Security Extensions (DNSSEC)", BCP 237,
              RFC 9364, DOI 10.17487/RFC9364, February 2023,
              <https://www.rfc-editor.org/rfc/rfc9364>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/rfc/rfc7942>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [X.509]    Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/rfc/rfc5280>.

13.2.  Informative References

   [AWALA]    Narea, G., "Awala", 2019, <https://specs.awala.network/>.

   [JWT]      Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7519>.

   [LETRO]    Narea, G., "Letro", 2023, <https://letro.app/en/>.

   [LETRO-SERVER]
              Narea, G., "Letro Server", 2023,
              <https://docs.relaycorp.tech/letro-server/>.

   [VERAID]   Narea, G., "VeraId V1 Specification", 2025,
              <https://veraid.net/spec/>.

Appendix A.  ASN.1 Schemas

   The following ASN.1 schemas define the data structures used in the
   DomainAuth protocol:

-- Top-level schemas for DomainAuth components

-- DNSSEC chain is a set of DNS messages
DnssecChain ::= SET OF OCTET STRING

-- Default tag defines all tags as IMPLICIT
-- Member Id Bundle
MemberIdBundle ::= SEQUENCE {
    version                  [0] INTEGER DEFAULT 0,
    dnssecChain              [1] DnssecChain,
    organisationCertificate  [2] Certificate,
    memberCertificate        [3] Certificate
}

-- Signature Bundle
SignatureBundle ::= SEQUENCE {
    version                  [0] INTEGER DEFAULT 0,
    dnssecChain              [1] DnssecChain,
    organisationCertificate  [2] Certificate,
    signature                [3] ContentInfo
}

-- Signature metadata (included as a signed attribute)
SignatureMetadata ::= SEQUENCE {
    serviceOid      [0] OBJECT IDENTIFIER,
    validityPeriod  [1] DatePeriod
}

-- Date period structure
DatePeriod ::= SEQUENCE {
    start  [0] GeneralizedTime,
    end    [1] GeneralizedTime
}

-- Member attribution (included as a signed attribute in organisation signatures)
MemberAttribution ::= UTF8String

   All DomainAuth data structures MUST be encoded using ASN.1
   Distinguished Encoding Rules (DER).  Implementations MUST reject
   structures that are not valid DER.

   The ASN.1 structures reference standard types from other
   specifications:

   *  Certificate is defined in X.509 (RFC 5280).

   *  ContentInfo is defined in CMS (RFC 5652).

   All implementations MUST strictly adhere to these schemas.  Any
   deviation in structure or encoding may result in verification
   failures.

Appendix B.  OID Registry

   The following Object Identifiers (OIDs) are defined for use in the
   DomainAuth protocol:

   1.  *DomainAuth Base OID:*

       *  1.3.6.1.4.1.58708.1 (iso.org.dod.internet.private.enterprise.r
          elaycorp.domainauth).

   2.  *Protocol OIDs:*

       *  1.3.6.1.4.1.58708.1.0: Signature Metadata Attribute.

       *  1.3.6.1.4.1.58708.1.2: Member Attribution Attribute.

   3.  *Service OIDs:*

       *  1.3.6.1.4.1.58708.1.1: Test Service.

   Third-party services implementing DomainAuth MUST register and use
   their own OIDs under their own arcs.  The DomainAuth OID arc
   (1.3.6.1.4.1.58708.1) is reserved exclusively for official services
   and protocol components under the DomainAuth project umbrella.

   OID registration procedures:

   1.  OIDs under the DomainAuth base OID are managed by the DomainAuth
       maintainers and reserved for official DomainAuth project
       purposes.

   2.  Third parties MUST NOT use OIDs under the DomainAuth arc for
       their services.

   3.  Third parties without their own OID arc SHOULD obtain one from
       their national registration authority or through IANA's Private
       Enterprise Number (PEN) registry.

   4.  Once allocated, OIDs are never reassigned to different services.

   Services SHOULD use versioning in their OID structure to manage
   protocol evolution.  Major, incompatible changes SHOULD use a new
   OID, whilst minor, backward-compatible changes MAY use the same OID.

Acknowledgements

   The author is grateful to the Open Technology Fund for funding the
   implementation of VeraId, which heavily influenced the final
   specification of the VeraId protocol, and therefore DomainAuth as its
   successor.

   The author would also like to thank the authors of [DNS], [DNSSEC],
   [X.509], [CMS], and [ASN.1], which underpin the present protocol.

Author's Address

   Gus Narea
   Relaycorp
   Email: gus@relaycorp.tech
